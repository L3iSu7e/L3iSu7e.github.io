<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023年春秋杯冬季赛 RE Writeup</title>
    <link href="/2024/01/27/ichunqiu2023/"/>
    <url>/2024/01/27/ichunqiu2023/</url>
    
    <content type="html"><![CDATA[<p>2023年春秋杯冬季赛 Reverse 题解</p><span id="more"></span><h1 id="UPX2023"><a href="#UPX2023" class="headerlink" title="UPX2023"></a>UPX2023</h1><h2 id="0x0-脱壳"><a href="#0x0-脱壳" class="headerlink" title="0x0 脱壳"></a>0x0 脱壳</h2><h3 id="工具一键脱壳"><a href="#工具一键脱壳" class="headerlink" title="工具一键脱壳"></a>工具一键脱壳</h3><p><img src="/./img/ichunqiu2023/a2316e089ace79e438fdb65ae3e894dfa2afdf1b.png"><br>带有UPX壳，直接用工具脱会报错，打开010Editor，将小写的upx改为大写的upx即可<br><img src="/./img/ichunqiu2023/779988cc922dc1c18eb3eb3f22a657a113a3e8d0.png"><br>修改之后，就可以一键脱壳了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ⚡Administrator ❯❯ upx.exe -d .\upx2023fix.exe<br>                       Ultimate Packer for eXecutables<br>                          Copyright (C) 1996 - 2024<br>UPX 4.2.2       Markus Oberhumer, Laszlo Molnar &amp; John Reiser    Jan 3rd 2024<br><br>        File size         Ratio      Format      Name<br>   --------------------   ------   -----------   -----------<br>   1859146 &lt;-   1177162   63.32%    win64/pe     upx2023fix.exe<br><br>Unpacked 1 file.<br></code></pre></td></tr></table></figure><h3 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h3><p>自己做的时候没有注意到大小写的问题，也就借此机会记录一下详细手脱的过程<br>使用的软件：x64dbg及其自带插件 Scylla<br>参考链接：<a href="https://www.anquanke.com/post/id/99750">https://www.anquanke.com/post/id/99750</a></p><p>首先使用ida找到大跳转<br><img src="/./img/ichunqiu2023/f6274e3b1c728dcd7d5c20f11fcb79700fe9cca1.png"><br><img src="/./img/ichunqiu2023/ff2723d730649725114e58140aa8772c9c53ebcf.png"></p><p>在x64dbg中找到这个jmp直接，跟进去<br><img src="/./img/ichunqiu2023/1516cdae281dbf18e35d16850730a11c0f92baba.png"><br>找到OEP<br><img src="/./img/ichunqiu2023/86037aa2b3c747f1b7b08b92332f31c57387f558.png"><br>选择插件 Scylla dump另存为<br><img src="/./img/ichunqiu2023/d4905a8ce27919a97a8bd81469307286d01819b5.png"><br>dump完成后修复IAT表，首先搜索IAT表<br><img src="/./img/ichunqiu2023/af26fec7fb78e095fc05dae3a97ac7afb3e5dec1.png"> Get<br>Imports<br><img src="/./img/ichunqiu2023/910fb6898ba1133e6478c6b6857618d68452bc76.png"><br>修复Dump出来的文件<br><img src="/./img/ichunqiu2023/188985ca70c2dce53105fa156c80b950b4ff3e55.png"><br>出现下面的情况表示修复成功<br><img src="/./img/ichunqiu2023/2e791e1ed573e2338eafc6a50bbeeb3e8a075d61.png"><br>我们可以直接运行试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ .\upx2023_dump_SCY.exe<br>input your flag（用flag&#123;&#125;包裹）: aaaaaaaaaaaaaaaaaaaa<br>len error<br></code></pre></td></tr></table></figure><p>可以运行，脱壳成功</p><blockquote><p>但是电脑重启之后好像就不行 了…<br>并且对照工具脱壳后的结果，差异有点大，主要是在符号上</p></blockquote><h2 id="0x1-分析"><a href="#0x1-分析" class="headerlink" title="0x1 分析"></a>0x1 分析</h2><p>main函数的逻辑比较清晰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  std::ostream *v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *tb; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> cmpData[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-60h] BYREF</span><br>  <span class="hljs-type">char</span> input[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+D0h] [rbp+50h] BYREF</span><br>  <span class="hljs-type">char</span> v8[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp+60h] BYREF</span><br>  <span class="hljs-type">char</span> v9[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp+70h] BYREF</span><br>  <span class="hljs-type">int</span> ta; <span class="hljs-comment">// [rsp+104h] [rbp+84h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Seed; <span class="hljs-comment">// [rsp+108h] [rbp+88h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10Ch] [rbp+8Ch]</span><br><br>  _main(argc, argv, envp);<br>  Seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>i64);<br>  <span class="hljs-built_in">srand</span>(Seed);<br>  std::string::<span class="hljs-built_in">string</span>((std::string *)input);<br>  std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;((std::ostream *)&amp;std::cout, Str);<br>  std::<span class="hljs-keyword">operator</span>&gt;&gt;&lt;<span class="hljs-type">char</span>&gt;((std::istream *)&amp;std::cin, (std::string *)input);<br>  std::string::<span class="hljs-built_in">string</span>((std::string *)v9, (<span class="hljs-type">const</span> std::string *)input);<br>  <span class="hljs-built_in">change</span>(v8, v9);<br>  std::string::<span class="hljs-keyword">operator</span>=(input, v8);<br>  std::string::~<span class="hljs-built_in">string</span>((std::string *)v8);<br>  std::string::~<span class="hljs-built_in">string</span>((std::string *)v9);<br>  <span class="hljs-keyword">if</span> ( std::string::<span class="hljs-built_in">length</span>((std::string *)input) != <span class="hljs-number">42</span> )<span class="hljs-comment">// 判断长度</span><br>  &#123;<br>    v3 = (std::ostream *)std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;((std::ostream *)&amp;std::cout, <span class="hljs-string">&quot;len error&quot;</span>);<br>    std::endl&lt;<span class="hljs-type">char</span>,std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(v3);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">qmemcpy</span>(cmpData, &amp;::cmpData, <span class="hljs-number">0xA8</span>ui64);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">41</span>; ++i )<br>  &#123;<br>    ta = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">255</span>;<br>    tb = (<span class="hljs-type">char</span> *)std::string::<span class="hljs-keyword">operator</span>[](input, i);<br>    <span class="hljs-keyword">if</span> ( (ta ^ *tb) != cmpData[i] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  std::string::~<span class="hljs-built_in">string</span>((std::string *)input);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概流程：输入经过打乱顺序后-&gt;判断长度是否为42-&gt;以当前的时间为种子生成随机数，使用该随机数异或打乱后的flag-&gt; 进行对比</p><p>打乱顺序可以通过调试得到固定的次序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">input: ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnop<br>en: AEIMQUYcgkoBDFHJLNPRTVXZbdfhjlnpCGKOSWaeim<br></code></pre></td></tr></table></figure><p>根据上述关系可进行还原</p><h2 id="0x2-求解"><a href="#0x2-求解" class="headerlink" title="0x2 求解"></a>0x2 求解</h2><p>分析的重点是对随机数的处理，首先我们通过提示知道flag的格式是<code>flag&#123;xxxxx&#125;</code>，那么我们可以通过异或还原出六个随机数，并且通过打乱顺序后字符串确定其索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">oStr = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnop&#x27;</span><br>cStr = <span class="hljs-string">&#x27;AEIMQUYcgkoBDFHJLNPRTVXZbdfhjlnpCGKOSWaeim&#x27;</span><br><br>order = [oStr.index(cStr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cStr))]<br><br>demoStr = <span class="hljs-string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span><br>enStr = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(demoStr)):<br>    enStr += demoStr[order[i]]<br><span class="hljs-built_in">print</span>(enStr)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">&#x27;f&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">&#x27;f&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>))&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">&#x27;l&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">&#x27;l&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;l&#x27;</span>))&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">&#x27;a&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">&#x27;a&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">&#x27;g&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">&#x27;g&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;g&#x27;</span>))&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">r&#x27;&#123;&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">r&#x27;&#123;&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#123;&#x27;</span>))&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;enStr.index(<span class="hljs-string">r&#x27;&#125;&#x27;</span>)&#125;</span> -&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(cmpData[enStr.index(<span class="hljs-string">r&#x27;&#125;&#x27;</span>)] ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>))&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0 -&gt; 111</span><br><span class="hljs-string">11 -&gt; 170</span><br><span class="hljs-string">32 -&gt; 155</span><br><span class="hljs-string">12 -&gt; 2</span><br><span class="hljs-string">1 -&gt; 24</span><br><span class="hljs-string">31 -&gt; 128</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>通过网站得到出题前的 2023.1.1的时间戳 <a href="https://www.epochconverter.com/">Epoch Converter - Unix Timestamp<br>Converter</a>和文件的修改时间的时间戳，写爆破</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 设置自定义的种子值</span><br>    <span class="hljs-type">int</span> cmp[] = &#123; <span class="hljs-number">111</span>, <span class="hljs-number">24</span>, <span class="hljs-number">170</span>, <span class="hljs-number">2</span>, <span class="hljs-number">128</span>, <span class="hljs-number">155</span>&#125;;<br>    <span class="hljs-type">int</span> order[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>&#125;;<span class="hljs-comment">// f&#123;lg&#125;a</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1672531200</span>; k &lt; <span class="hljs-number">1685836800</span>; k++) &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> customSeed = k;<br>        srand(customSeed);<br><br>        <span class="hljs-comment">// 生成一些随机数</span><br>        <span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> delta = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; ++i) &#123;<br>            <span class="hljs-type">int</span> randomValue = rand();<br>            randomValue %= <span class="hljs-number">255</span>;<br>            <span class="hljs-keyword">if</span> (i == order[temp]) &#123;<br>                <span class="hljs-keyword">if</span> (randomValue == cmp[temp]) &#123;<br>                    delta++;<br>                &#125;<br>                temp++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (delta == <span class="hljs-number">6</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The seed is %x\n&quot;</span>, customSeed); <span class="hljs-comment">// The seed is 64437f56</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到异或值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> customSeed = <span class="hljs-number">0x64437f56</span>;<br>        srand(customSeed);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">42</span>; i++) &#123;<br>            <span class="hljs-type">int</span> randomValue = rand();<br>            <span class="hljs-comment">// printf(&quot;The randomValue-&gt; %x\nthe result = %x\n&quot;, randomValue, randomValue % 255);</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x,&quot;</span>, randomValue % <span class="hljs-number">255</span>);<br>            <span class="hljs-comment">// 0x6f,0x18,0xec,0xc4,0x3a,0xba,0x5d,0x61,0x3d,0x33,0xa9,0xaa,0x2,0x11,0x71,0x8b,0xa2,0x26,0xe,0x4d,0x83,0x42,0x70,0xca,0x50,0x71,0xe7,0x6b,0xf,0x32,0x9f,0x80,0x9b,0xb7,0xe3,0xb8,0xe0,0x1c,0x10,0xb4,0x2a,0x39</span><br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据异或值得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">oStr = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnop&#x27;</span><br>cStr = <span class="hljs-string">&#x27;AEIMQUYcgkoBDFHJLNPRTVXZbdfhjlnpCGKOSWaeim&#x27;</span><br><br>cmpData = [<span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000063</span>, <span class="hljs-number">0x000000D9</span>, <span class="hljs-number">0x000000F6</span>, <span class="hljs-number">0x00000058</span>, <span class="hljs-number">0x000000DD</span>, <span class="hljs-number">0x0000003F</span>, <span class="hljs-number">0x0000004C</span>, <span class="hljs-number">0x0000000F</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x00000098</span>, <span class="hljs-number">0x000000C6</span>, <span class="hljs-number">0x00000065</span>, <span class="hljs-number">0x00000021</span>, <span class="hljs-number">0x00000041</span>, <span class="hljs-number">0x000000ED</span>, <span class="hljs-number">0x000000C4</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x0000003A</span>, <span class="hljs-number">0x0000007B</span>, <span class="hljs-number">0x000000E5</span>, <span class="hljs-number">0x00000075</span>, <span class="hljs-number">0x0000005D</span>, <span class="hljs-number">0x000000A9</span>, <span class="hljs-number">0x00000031</span>, <span class="hljs-number">0x00000041</span>, <span class="hljs-number">0x000000D7</span>, <span class="hljs-number">0x00000052</span>, <span class="hljs-number">0x0000006C</span>, <span class="hljs-number">0x0000000A</span>, <span class="hljs-number">0x000000FA</span>, <span class="hljs-number">0x000000FD</span>, <span class="hljs-number">0x000000FA</span>, <span class="hljs-number">0x00000084</span>, <span class="hljs-number">0x000000DB</span>, <span class="hljs-number">0x00000089</span>, <span class="hljs-number">0x000000CD</span>, <span class="hljs-number">0x0000007E</span>, <span class="hljs-number">0x00000027</span>, <span class="hljs-number">0x00000085</span>, <span class="hljs-number">0x00000013</span>, <span class="hljs-number">0x00000008</span>]<br>xorData = [<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0xec</span>,<span class="hljs-number">0xc4</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xa9</span>,<span class="hljs-number">0xaa</span>,<span class="hljs-number">0x2</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x8b</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0xca</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0xe7</span>,<span class="hljs-number">0x6b</span>,<span class="hljs-number">0xf</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x9f</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x9b</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0xb8</span>,<span class="hljs-number">0xe0</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x39</span>]<br>res = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cmpData)):<br>    res.append(xorData[i] ^ cmpData[i])<br>result = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res)<br>enOrder = [cStr.index(oStr[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(oStr))]<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    flag += result[enOrder[i]]<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># flag&#123;0305f8f2-14b6-fg7b-bc7a-010299c881e1&#125;</span><br></code></pre></td></tr></table></figure><h1 id="file-encryptor"><a href="#file-encryptor" class="headerlink" title="file_encryptor"></a>file_encryptor</h1><h2 id="0x0-去花指令"><a href="#0x0-去花指令" class="headerlink" title="0x0 去花指令"></a>0x0 去花指令</h2><p>TLS回调函数里面有反调试，TLS回调函数和main函数里面有异常处理，这些干扰了我们的分析</p><p>首先处理TLS回调函数中的反调试和异常处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">004018</span>DA                 test    eax, eax<br>.text:<span class="hljs-number">004018</span>DC                 jz      <span class="hljs-type">short</span> loc_401957<br>.text:<span class="hljs-number">004018</span>DE ;   __try &#123; <span class="hljs-comment">// __except at loc_401916</span><br>.text:<span class="hljs-number">004018</span>DE                 mov     [ebp+ms_exc.registration.TryLevel], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">004018E5</span>                 call    ds:IsDebuggerPresent<br>.text:<span class="hljs-number">004018</span>EB                 test    eax, eax<br>.text:<span class="hljs-number">004018</span>ED                 jz      <span class="hljs-type">short</span> loc_4018F7<br>.text:<span class="hljs-number">004018</span>EF                 push    <span class="hljs-number">0</span>               ; Code<br>.text:<span class="hljs-number">004018F</span>1                 call    ds:__imp_exit<br>.text:<span class="hljs-number">004018F</span>7 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">004018F</span>7<br>.text:<span class="hljs-number">004018F</span>7 loc_4018F7:                             ; CODE XREF: TlsCallback_0+<span class="hljs-number">4</span>D↑j<br>.text:<span class="hljs-number">004018F</span>7                 mov     [ebp+var_20], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">004018F</span>E                 mov     ecx, [ebp+var_20]<br>.text:<span class="hljs-number">00401901</span>                 mov     dword ptr [ecx], <span class="hljs-number">2</span>Ah ; <span class="hljs-string">&#x27;*&#x27;</span><br>.text:<span class="hljs-number">00401901</span> ;   &#125; <span class="hljs-comment">// starts at 4018DE</span><br>.text:<span class="hljs-number">00401907</span>                 mov     [ebp+ms_exc.registration.TryLevel], <span class="hljs-number">0F</span>FFFFFFEh<br>.text:<span class="hljs-number">0040190</span>E                 jmp     <span class="hljs-type">short</span> loc_401950<br>.text:<span class="hljs-number">00401910</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00401910</span><br>.text:<span class="hljs-number">00401910</span> loc_401910:                             ; DATA XREF: .rdata:stru_403828↓o<br>.text:<span class="hljs-number">00401910</span> ;   __except filter <span class="hljs-comment">// owned by 4018DE</span><br>.text:<span class="hljs-number">00401910</span>                 mov     eax, <span class="hljs-number">1</span><br>.text:<span class="hljs-number">00401915</span>                 retn<br>.text:<span class="hljs-number">00401916</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00401916</span><br>.text:<span class="hljs-number">00401916</span> loc_401916:                             ; DATA XREF: .rdata:stru_403828↓o<br>.text:<span class="hljs-number">00401916</span> ;   __except(loc_401910) <span class="hljs-comment">// owned by 4018DE</span><br>.text:<span class="hljs-number">00401916</span>                 mov     esp, [ebp+ms_exc.old_esp]<br>.text:<span class="hljs-number">00401919</span>                 mov     [ebp+var_1C], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00401920</span>                 jmp     <span class="hljs-type">short</span> loc_40192B<br></code></pre></td></tr></table></figure><p>过了反调试后，程序会在00401901触发异常，该异常的处理在00401916，那么从004018DA到00401916这一段的代码应该是可以直接patch掉的，Patch后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __stdcall <span class="hljs-title function_">TlsCallback_0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+14h] [ebp-1Ch]</span><br><br>  <span class="hljs-keyword">if</span> ( byte_405034 )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">23</span>; ++i )<br>      byte_40501C[i] ^= <span class="hljs-number">0x22</span>u;<br>    byte_405034 = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来处理main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">0040199</span>A                 mov     large fs:<span class="hljs-number">0</span>, eax<br>.text:<span class="hljs-number">004019</span>A0                 mov     [ebp+ms_exc.old_esp], esp<br>.text:<span class="hljs-number">004019</span>A3 ;   __try &#123; <span class="hljs-comment">// __except at loc_4019CC</span><br>.text:<span class="hljs-number">004019</span>A3                 mov     [ebp+ms_exc.registration.TryLevel], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">004019</span>AA                 mov     [ebp+var_3C], <span class="hljs-number">0</span><br>.text:<span class="hljs-number">004019B</span>1                 mov     eax, [ebp+var_3C]<br>.text:<span class="hljs-number">004019B</span>4                 mov     dword ptr [eax], <span class="hljs-number">2</span>Ah ; <span class="hljs-string">&#x27;*&#x27;</span><br>.text:<span class="hljs-number">004019B</span>4 ;   &#125; <span class="hljs-comment">// starts at 4019A3</span><br>.text:<span class="hljs-number">004019B</span>A                 mov     [ebp+ms_exc.registration.TryLevel], <span class="hljs-number">0F</span>FFFFFFEh<br>.text:<span class="hljs-number">004019</span>C1                 jmp     loc_401B18<br>.text:<span class="hljs-number">004019</span>C6 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">004019</span>C6<br>.text:<span class="hljs-number">004019</span>C6 loc_4019C6:                             ; DATA XREF: .rdata:stru_403848↓o<br>.text:<span class="hljs-number">004019</span>C6 ;   __except filter <span class="hljs-comment">// owned by 4019A3</span><br>.text:<span class="hljs-number">004019</span>C6                 mov     eax, <span class="hljs-number">1</span><br>.text:<span class="hljs-number">004019</span>CB                 retn<br>.text:<span class="hljs-number">004019</span>CC ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">004019</span>CC<br>.text:<span class="hljs-number">004019</span>CC loc_4019CC:                             ; DATA XREF: .rdata:stru_403848↓o<br>.text:<span class="hljs-number">004019</span>CC ;   __except(loc_4019C6) <span class="hljs-comment">// owned by 4019A3</span><br>.text:<span class="hljs-number">004019</span>CC                 mov     esp, [ebp+ms_exc.old_esp]<br>.text:<span class="hljs-number">004019</span>CF                 push    <span class="hljs-number">0</span>               ; lpModuleName<br>.text:<span class="hljs-number">004019</span>D1                 call    ds:GetModuleHandleW<br></code></pre></td></tr></table></figure><p>004019B4处的异常触发会跳转到004019CC，从004019A3到004019CC之间的代码都可以nop掉<br>这里有一个花指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">008419F</span>5                 call    sub_842140<br>.text:<span class="hljs-number">008419F</span>A                 call    near ptr <span class="hljs-number">15</span>C9782h<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00842140</span> sub_842140      proc near               ; CODE XREF: .text:<span class="hljs-number">00841329</span>↑p<br>.text:<span class="hljs-number">00842140</span>                                         ; _main+<span class="hljs-number">85</span>↑p<br>.text:<span class="hljs-number">00842140</span>                 add     dword ptr [esp+<span class="hljs-number">0</span>], <span class="hljs-number">1</span><br>.text:<span class="hljs-number">00842144</span>                 retn<br>.text:<span class="hljs-number">00842144</span> sub_842140      endp<br></code></pre></td></tr></table></figure><p><code>sub_842140</code> 函数中调整了函数返回后的下一条地址，也就是返回地址是<br>008419FB，patch修改一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">008419F</span>2                 mov     [ebp+hResInfo], eax<br>.text:<span class="hljs-number">008419F</span>5                 nop<br>.text:<span class="hljs-number">008419F</span>6                 nop<br>.text:<span class="hljs-number">008419F</span>7                 nop<br>.text:<span class="hljs-number">008419F</span>8                 nop<br>.text:<span class="hljs-number">008419F</span>9                 nop<br>.text:<span class="hljs-number">008419F</span>A                 nop<br>.text:<span class="hljs-number">008419F</span>B                 cmp     [ebp+hResInfo], <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>修改后就可以见到较为完整的伪代码了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *Src; <span class="hljs-comment">// [esp+24h] [ebp-34h]</span><br>  HGLOBAL hResData; <span class="hljs-comment">// [esp+28h] [ebp-30h]</span><br>  HMODULE hModule; <span class="hljs-comment">// [esp+2Ch] [ebp-2Ch]</span><br>  HRSRC hResInfo; <span class="hljs-comment">// [esp+30h] [ebp-28h]</span><br>  DWORD Size; <span class="hljs-comment">// [esp+34h] [ebp-24h]</span><br>  DWORD i; <span class="hljs-comment">// [esp+38h] [ebp-20h]</span><br>  <span class="hljs-type">void</span> *v10; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch]</span><br><br>  hModule = GetModuleHandleW(<span class="hljs-number">0</span>);<br>  hResInfo = FindResourceW(hModule, (LPCWSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">L&quot;DATA&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( hResInfo )<br>  &#123;<br>    Size = SizeofResource(hModule, hResInfo);<br>    hResData = LoadResource(hModule, hResInfo);<br>    v10 = (<span class="hljs-type">void</span> *)sub_842156(Size);<br>    <span class="hljs-keyword">if</span> ( hResData )<br>    &#123;<br>      Src = LockResource(hResData);<br>      <span class="hljs-keyword">if</span> ( Src )<br>      &#123;<br>        <span class="hljs-built_in">memcpy</span>(v10, Src, Size);<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; Size; ++i )<br>          *((_BYTE *)v10 + i) ^= <span class="hljs-number">0x33</span>u;<br>        dword_84541C = sub_841CE0(v10, Size);<br>      &#125;<br>      FreeResource(hResData);<br>    &#125;<br>    j_j_free(v10);<br>  &#125;<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))loc_841320)();<br>  sub_842000();<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类似的花指令还有</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00841320</span>                 push    ebp<br>.text:<span class="hljs-number">00841321</span>                 mov     ebp, esp<br>.text:<span class="hljs-number">00841323</span>                 sub     esp, <span class="hljs-number">1</span>Ch<br>.text:<span class="hljs-number">00841326</span>                 push    ebx<br>.text:<span class="hljs-number">00841327</span>                 push    esi<br>.text:<span class="hljs-number">00841328</span>                 push    edi<br>.text:<span class="hljs-number">00841329</span>                 call    sub_842140<br>.text:<span class="hljs-number">0084132</span>E                 call    near ptr <span class="hljs-number">81301B</span>h<br>.text:<span class="hljs-number">00841333</span>                 inc     dword ptr [ebp<span class="hljs-number">-767B</span>F040h]<br></code></pre></td></tr></table></figure><p>同样的进行Patch处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00841328</span>                 push    edi<br>.text:<span class="hljs-number">00841329</span>                 nop<br>.text:<span class="hljs-number">0084132</span>A                 nop<br>.text:<span class="hljs-number">0084132B</span>                 nop<br>.text:<span class="hljs-number">0084132</span>C                 nop<br>.text:<span class="hljs-number">0084132</span>D                 nop<br>.text:<span class="hljs-number">0084132</span>E                 nop<br>.text:<span class="hljs-number">0084132F</span>                 call    sub_841050<br></code></pre></td></tr></table></figure><p>此时整个程序就较为清晰了</p><h2 id="0x1-分析-1"><a href="#0x1-分析-1" class="headerlink" title="0x1 分析"></a>0x1 分析</h2><p>相当于附件中还有另一个程序，程序先加载这个程序，然后进行解密，解密后得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cryptsp.dll:00E30000 cryptsp_dll     segment byte public &#x27;CODE&#x27; use32<br>cryptsp.dll:00E30000                 assume cs:cryptsp_dll<br>cryptsp.dll:00E30000                 ;org 0E30000h<br>cryptsp.dll:00E30000                 assume es:debug013, ss:debug013, ds:debug013, fs:debug013, gs:debug013<br>cryptsp.dll:00E30000                 db  4Dh ; M<br>cryptsp.dll:00E30001                 db  5Ah ; Z<br>cryptsp.dll:00E30002                 db  90h<br></code></pre></td></tr></table></figure><p>在函数sub_F81050中，检查了卷序列号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_F81050</span><span class="hljs-params">()</span><br>&#123;<br>  DWORD VolumeSerialNumber; <span class="hljs-comment">// [esp+4h] [ebp-8h] BYREF</span><br><br>  VolumeSerialNumber = <span class="hljs-number">0</span>;<br>  GetVolumeInformationA(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;VolumeSerialNumber, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( VolumeSerialNumber == <span class="hljs-number">0x7DAB1D35</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0x7DAB1D35</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>卷序列号是一个唯一标识磁盘卷的数值，这里我们需要手动跳过一下，或者修改程序，直接让其返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sub_F82000</span><span class="hljs-params">()</span><br>&#123;<br>  HANDLE hFindFile; <span class="hljs-comment">// [esp+0h] [ebp-874h]</span><br>  PWSTR ppszPath; <span class="hljs-comment">// [esp+4h] [ebp-870h] BYREF</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">WIN32_FIND_DATAW</span> <span class="hljs-title">FindFileData</span>;</span> <span class="hljs-comment">// [esp+8h] [ebp-86Ch] BYREF</span><br>  WCHAR v3[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+258h] [ebp-61Ch] BYREF</span><br>  WCHAR FileName[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+460h] [ebp-414h] BYREF</span><br>  WCHAR pszDest[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+668h] [ebp-20Ch] BYREF</span><br><br>  <span class="hljs-keyword">if</span> ( !SHGetKnownFolderPath(&amp;rfid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;ppszPath) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( PathCombineW(pszDest, ppszPath, <span class="hljs-string">L&quot;document&quot;</span>) )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( PathCombineW(FileName, pszDest, <span class="hljs-string">L&quot;*.*&quot;</span>) )<br>      &#123;<br>        hFindFile = FindFirstFileW(FileName, &amp;FindFileData);<br>        <span class="hljs-keyword">if</span> ( hFindFile != (HANDLE)<span class="hljs-number">-1</span> )<br>        &#123;<br>          <span class="hljs-keyword">do</span><br>          &#123;<br>            <span class="hljs-keyword">if</span> ( FindFileData.cFileName[<span class="hljs-number">0</span>] != <span class="hljs-number">46</span> )<br>            &#123;<br>              PathCombineW(v3, pszDest, FindFileData.cFileName);<br>              sub_F817E0(FindFileData.cFileName, v3);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">while</span> ( FindNextFileW(hFindFile, &amp;FindFileData) );<br>          FindClose(hFindFile);<br>        &#125;<br>      &#125;<br>    &#125;<br>    CoTaskMemFree(ppszPath);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码遍历了用户目录的文档目录<br><img src="/./img/ichunqiu2023/558946fb52b8d287dac4e31663bce662779e9825.png"><br>形成了通配符<br><img src="/./img/ichunqiu2023/e3213b1cb1761db5eae0f79d24a99a31f26bb350.png"><br>得把文件放到这个目录<br><img src="/./img/ichunqiu2023/1c1ba7076b387204058f2951e85412386bea5143.png"><br>进入函数之后，发现有rsa相关特征</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">debug022:<span class="hljs-number">007</span>D7360 off_7D7360      dd offset rsaenh_CPGenKey<br>...<br>debug022:<span class="hljs-number">007</span>CA5E0 off_7CA5E0      dd offset rsaenh_CPAcquireContext<br></code></pre></td></tr></table></figure><p>跟进去之后，调用了解密的cryptsp.dll<br>因为是对文件进行加密，我们直接找到加密的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !v6(*a1, <span class="hljs-number">0</span>, FileSize == <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, lpBuffer, &amp;NumberOfBytesRead, dwBytes)<br>  || !WriteFile(hFile, lpBuffer, NumberOfBytesRead, &amp;NumberOfBytesRead, <span class="hljs-number">0</span>) )<br></code></pre></td></tr></table></figure><p>这里的v6是dll中的一个函数，跟进v6，调用了 rasenh.dll 中的CPEncrypt函数<br><img src="/./img/ichunqiu2023/b869c09b5ff8b62413f40e64ec870e29f615514e.png"><br>经过调试呢，发现就是这里进行的加密，也就是CPEncrypt函数进行加密</p><h2 id="0x2-求解-1"><a href="#0x2-求解-1" class="headerlink" title="0x2 求解"></a>0x2 求解</h2><p>去分析这个文件的加密有点复杂，因为这个dll里面是有解密函数的，我们可以通过更改调用函数实现解密<br>找到CPDecrypt函数<br><img src="/./img/ichunqiu2023/c091f7229a49472c793498612853af7cfbcf2080.png"><br>将esi寄存器的值修改为这个，直接F9 之后看1.txt<br><img src="/./img/ichunqiu2023/84285630a8789385574450999657ac778a573e6b.png"><br>得到了flag</p><h1 id="coos"><a href="#coos" class="headerlink" title="coos"></a>coos</h1><h2 id="0x0-分析"><a href="#0x0-分析" class="headerlink" title="0x0 分析"></a>0x0 分析</h2><p>main函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [esp+0h] [ebp-184h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+0h] [ebp-184h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+Ch] [ebp-178h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+D8h] [ebp-ACh]</span><br>  <span class="hljs-type">int</span> *a2; <span class="hljs-comment">// [esp+E4h] [ebp-A0h] BYREF</span><br>  _QWORD v9[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+E8h] [ebp-9Ch] BYREF</span><br>  <span class="hljs-type">int</span> *Str[<span class="hljs-number">27</span>]; <span class="hljs-comment">// [esp+10Ch] [ebp-78h] BYREF</span><br>  <span class="hljs-type">int</span> **ta; <span class="hljs-comment">// [esp+178h] [ebp-Ch]</span><br><br>  __CheckForDebuggerJustMyCode(&amp;unk_972016);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dword_9705D0[<span class="hljs-number">0</span>]);<br>  sub_9612D0();                                 <span class="hljs-comment">// 初始化相关内存</span><br>  sub_96128A();                                 <span class="hljs-comment">// 相关数据赋值</span><br>  ta = <span class="hljs-number">0</span>;<br>  j_memset(Str, <span class="hljs-number">0</span>, <span class="hljs-number">0x64</span>u);<br>  deData(&amp;unk_96F5AC);                          <span class="hljs-comment">// 解密输出 “plz input ...”</span><br>  <span class="hljs-built_in">printf</span>(&amp;unk_96F5AC, v4);<br>  deData(&amp;unk_96F5AC);<br>  deData(aC);                                   <span class="hljs-comment">// 解密 %s</span><br>  <span class="hljs-built_in">scanf</span>(aC, (<span class="hljs-type">char</span>)Str);<br>  deData(aC);<br>  <span class="hljs-keyword">if</span> ( j_strlen((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)Str) != <span class="hljs-number">32</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  ta = Str;<br>  a2 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(v9, <span class="hljs-number">0</span>, <span class="hljs-number">0x1C</span>);<br>  Encrypt((<span class="hljs-type">int</span> *)Str, (<span class="hljs-type">int</span> *)&amp;a2);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i )<br>  &#123;<br>    v6 = dword_9704C8[i + <span class="hljs-number">44</span>];<br>    <span class="hljs-keyword">if</span> ( (&amp;a2)[<span class="hljs-number">2</span> * i] != (<span class="hljs-type">int</span> *)dword_96E280[<span class="hljs-number">2</span> * v6] || LODWORD(v9[i]) != dword_96E284[<span class="hljs-number">2</span> * v6] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  deData(&amp;unk_96F5C4);<br>  <span class="hljs-built_in">printf</span>(&amp;unk_96F5C4, v5);<br>  deData(&amp;unk_96F5C4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可知长度是32，在主要的加密函数中有一个switch语句，还有很多分支，分析了一下，发现是一个虚拟机逆向，大概是个用32位模拟64位环境的过程<br>调试分析较为麻烦，这里就使用之前用过的idapython来使得在调试的过程中能够打印出相应的操作</p><h2 id="0x1-IDApython-脚本编写"><a href="#0x1-IDApython-脚本编写" class="headerlink" title="0x1 IDApython 脚本编写"></a>0x1 IDApython 脚本编写</h2><p>我将switch语句中用到的一些函数进行了分析，用一些指令来表示他们 </p><blockquote><p>这里面的PUSH 和 POP 写的有点随便</p></blockquote><p>然后在适当的位置下断点，通过读取寄存器的值，打印当前函数的主要功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> ida_dbg<br><span class="hljs-keyword">import</span> idaapi<br><br>BASE_ADDR = idaapi.get_imagebase()<br><br><span class="hljs-comment"># 断点字典</span><br>BPT_DICT = &#123;<span class="hljs-string">&#x27;MOV&#x27;</span>:<span class="hljs-number">0x1484A</span>,<br>            <span class="hljs-string">&#x27;PUSH&#x27;</span>:<span class="hljs-number">0x14A29</span>,<br>            <span class="hljs-string">&#x27;POP&#x27;</span>: <span class="hljs-number">0x149A8</span>,<br>            <span class="hljs-string">&#x27;SHL&#x27;</span>: <span class="hljs-number">0x14C1C</span>,<br>            <span class="hljs-string">&#x27;SHR&#x27;</span>: <span class="hljs-number">0x14C7C</span>,<br>            <span class="hljs-string">&#x27;ADD&#x27;</span>: <span class="hljs-number">0x12D96</span>,<br>            <span class="hljs-string">&#x27;XOR&#x27;</span>: <span class="hljs-number">0x12D36</span>,<br>            <span class="hljs-string">&#x27;AND&#x27;</span>: <span class="hljs-number">0x12BD6</span><br>            &#125;<br><br><span class="hljs-comment"># 终止条件</span><br>BPT_DICT[<span class="hljs-string">&#x27;END&#x27;</span>] = <span class="hljs-number">0x1513B</span><br><br><span class="hljs-comment"># 断点</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bpt</span>(<span class="hljs-params">arr</span>):<br>    arr = <span class="hljs-built_in">list</span>(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)):<br>        idc.add_bpt(arr[i]+BASE_ADDR)<br><br><br><span class="hljs-comment"># 分发器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatcher</span>(<span class="hljs-params">addr</span>):<br>    opcode = <span class="hljs-built_in">next</span>((key <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> BPT_DICT.items() <span class="hljs-keyword">if</span> value == (addr-BASE_ADDR)), <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> opcode == <span class="hljs-string">&#x27;MOV&#x27;</span>:<br>        a1 = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a2 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        a3 = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;MOV : [<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span>] = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a3)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span> &quot;</span>)<br>    <br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;PUSH&#x27;</span>:<br>        num = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        a2 = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;PUSH: 0x51FBA8[<span class="hljs-subst">&#123;num&#125;</span>] = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span> &quot;</span>)<br>    <br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;POP&#x27;</span>:<br>        num = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1 = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>)<br>        a2 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;POP: [<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(num)&#125;</span>] =  <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;SHL&#x27;</span>:<br>        a2 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        a1H = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1L = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;SHL: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1L)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1H)&#125;</span> &lt;&lt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;SHR&#x27;</span>:<br>        a2 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        a1H = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1L = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;SHR: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1L)&#125;</span> <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1H)&#125;</span> &gt;&gt; <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;ADD&#x27;</span>:<br>        a1 = idc.get_reg_value(<span class="hljs-string">&#x27;ecx&#x27;</span>)<br>        ebp = idc.get_reg_value(<span class="hljs-string">&#x27;ebp&#x27;</span>)<br>        a2 = idc.read_dbg_qword(ebp + <span class="hljs-number">0xc</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ADD: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span> += <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;XOR&#x27;</span>:<br>        eax = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1 = idc.read_dbg_qword(eax)<br>        ebp = idc.get_reg_value(<span class="hljs-string">&#x27;ebp&#x27;</span>)<br>        a2 = idc.read_dbg_qword(ebp + <span class="hljs-number">0xc</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;XOR: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span> ^= <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">elif</span> opcode == <span class="hljs-string">&#x27;AND&#x27;</span>:<br>        eax = idc.get_reg_value(<span class="hljs-string">&#x27;eax&#x27;</span>)<br>        a1 = idc.read_dbg_qword(eax)<br>        ebp = idc.get_reg_value(<span class="hljs-string">&#x27;ebp&#x27;</span>)<br>        a2 = idc.read_dbg_qword(ebp + <span class="hljs-number">0xc</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;AND: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a1)&#125;</span> &amp;= <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(a2)&#125;</span>&quot;</span>)<br>    <br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The addr is <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(addr)&#125;</span>, THe opcode is <span class="hljs-subst">&#123;opcode&#125;</span>. Something Wrong.&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># </span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Begin&quot;</span>)<br><br>    <span class="hljs-comment"># 获取基址</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;BASE_ADDR= &#x27;</span> + <span class="hljs-built_in">hex</span>(BASE_ADDR))<br>    <br><br>    <span class="hljs-comment"># 打上断点</span><br>    bpt(BPT_DICT.values())<br><br><br>    <span class="hljs-comment"># 执行</span><br>    idc.run_to(BPT_DICT[<span class="hljs-string">&#x27;END&#x27;</span>]+BASE_ADDR)<br>    idc.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="hljs-number">1</span>)<br>    CurrEIP = idc.get_reg_value(<span class="hljs-string">&#x27;eip&#x27;</span>)<br>    <span class="hljs-comment"># 判断是否到达终止条件</span><br>    <span class="hljs-keyword">while</span>(CurrEIP != BPT_DICT[<span class="hljs-string">&#x27;END&#x27;</span>]+BASE_ADDR):<br>        <span class="hljs-comment"># 判断断点是否合法</span><br>        <span class="hljs-keyword">if</span> (CurrEIP-BASE_ADDR) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> BPT_DICT.values():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Something Wrong. The EIP is <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(CurrEIP)&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 分发处理</span><br>        dispatcher(CurrEIP)<br><br>        <span class="hljs-comment"># 下一轮循环</span><br>        idc.run_to(BPT_DICT[<span class="hljs-string">&#x27;END&#x27;</span>]+BASE_ADDR)<br>        idc.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="hljs-number">1</span>)<br>        CurrEIP = idc.get_reg_value(<span class="hljs-string">&#x27;eip&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>处理得很慢，大概需要个十分钟左右，得到下面的结果（因为是8字节一组的加密，这里只选取一组数据，并展示其的几十行）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c">[*] Begin<br>BASE_ADDR= <span class="hljs-number">0x500000</span><br>MOV : [<span class="hljs-number">0x51fb88</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>PUSH: <span class="hljs-number">0x51FBA8</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0x31313131</span> <span class="hljs-number">0x31313131</span> <br>PUSH: <span class="hljs-number">0x51FBA8</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0x696c6f76</span> <span class="hljs-number">0x65696368</span> <br>POP: [<span class="hljs-number">0x51fb78</span>] =  <span class="hljs-number">0x696c6f76</span> <span class="hljs-number">0x65696368</span><br>POP: [<span class="hljs-number">0x51fb80</span>] =  <span class="hljs-number">0x31313131</span> <span class="hljs-number">0x31313131</span><br>XOR: <span class="hljs-number">0x696c6f7665696368</span> ^= <span class="hljs-number">0x3131313131313131</span><br>XOR: <span class="hljs-number">0x585d5e4754585259</span> ^= <span class="hljs-number">0x33</span><br>MOV : [<span class="hljs-number">0x51fba0</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>MOV : [<span class="hljs-number">0x51fb88</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> &lt;&lt; <span class="hljs-number">0x2</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> <br>SHR: <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> &gt;&gt; <span class="hljs-number">0x0</span><br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> <br>XOR: <span class="hljs-number">0x585d5e475458526a</span> &amp;= <span class="hljs-number">0xf</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>MOV : [<span class="hljs-number">0x51fb90</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> &lt;&lt; <span class="hljs-number">0x2</span><br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> &lt;&lt; <span class="hljs-number">0x0</span><br>ADD: <span class="hljs-number">0x0</span> += <span class="hljs-number">0x0</span><br>ADD: <span class="hljs-number">0x0</span> += <span class="hljs-number">0x1</span><br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> &lt;&lt; <span class="hljs-number">0x2</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> <br>SHR: <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> &gt;&gt; <span class="hljs-number">0x4</span><br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x585d5e4</span> <span class="hljs-number">0x75458526</span> <br>XOR: <span class="hljs-number">0x585d5e475458526</span> &amp;= <span class="hljs-number">0xf</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0xe</span> <br>MOV : [<span class="hljs-number">0x51fb90</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> &lt;&lt; <span class="hljs-number">0x2</span><br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0xe</span> &lt;&lt; <span class="hljs-number">0x4</span><br>ADD: <span class="hljs-number">0x0</span> += <span class="hljs-number">0xe0</span><br>ADD: <span class="hljs-number">0x1</span> += <span class="hljs-number">0x1</span><br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x2</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x2</span> &lt;&lt; <span class="hljs-number">0x2</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> <br>SHR: <span class="hljs-number">0x585d5e47</span> <span class="hljs-number">0x5458526a</span> &gt;&gt; <span class="hljs-number">0x8</span><br>...<br>SHR: <span class="hljs-number">0xdf6289f3</span> <span class="hljs-number">0x20c409d</span> &gt;&gt; <span class="hljs-number">0x3f</span><br>MOV : [<span class="hljs-number">0x51fb78</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> <br>XOR: <span class="hljs-number">0x1</span> &amp;= <span class="hljs-number">0x1</span><br>MOV : [<span class="hljs-number">0x51fb80</span>] = <span class="hljs-number">0x0</span> <span class="hljs-number">0x0</span> <br>SHL: <span class="hljs-number">0x0</span> <span class="hljs-number">0x1</span> &lt;&lt; <span class="hljs-number">0x0</span><br>ADD: <span class="hljs-number">0x9847c872</span> += <span class="hljs-number">0x1</span><br>ADD: <span class="hljs-number">0x3f</span> += <span class="hljs-number">0x1</span><br>PUSH: <span class="hljs-number">0x51FBA8</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">0xc0e302ce</span> <span class="hljs-number">0x9847c873</span> <br>PUSH: <span class="hljs-number">0x51FBA8</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">0xcb51f952</span> <span class="hljs-number">0x43105185</span> <br>POP: [<span class="hljs-number">0x51fb78</span>] =  <span class="hljs-number">0xcb51f952</span> <span class="hljs-number">0x43105185</span><br>POP: [<span class="hljs-number">0x51fb80</span>] =  <span class="hljs-number">0xc0e302ce</span> <span class="hljs-number">0x9847c873</span><br>XOR: <span class="hljs-number">0xcb51f95243105185</span> ^= <span class="hljs-number">0xc0e302ce9847c873</span><br>XOR: <span class="hljs-number">0xbb2fb9cdb5799f6</span> ^= <span class="hljs-number">0x33</span><br></code></pre></td></tr></table></figure><p>其中，有一些数据的来源无法确定，还需要经过调试。</p><h2 id="0x2-复现算法-求解"><a href="#0x2-复现算法-求解" class="headerlink" title="0x2 复现算法&amp;求解"></a>0x2 复现算法&amp;求解</h2><p>经过调试后，发现其加密算法大概如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">xorData = [<span class="hljs-number">0x696C6F7665696368</span>, <span class="hljs-number">0xCEADD4F8344B7D10</span>, <span class="hljs-number">0xCEBF000259A5B1DB</span>, <span class="hljs-number">0xD1EE63EA2F3AB735</span>, <span class="hljs-number">0xF7EBA4C0BB3AFC6A</span>, <span class="hljs-number">0x0FCB5F041F47B9F6</span>, <span class="hljs-number">0x7BAC2E8CEFDFAE97</span>, <span class="hljs-number">0x2CE86AE8883F2D42</span>, <span class="hljs-number">0x98CDB684B9EEB0A8</span>, <span class="hljs-number">0xC8F10A0794B3A1E3</span>, <span class="hljs-number">0xA89E4C0DEA6336BB</span>, <span class="hljs-number">0xAD4DC0BA7323C479</span>, <span class="hljs-number">0xBA2FC2EC42A27960</span>, <span class="hljs-number">0x52287D00F6B53759</span>, <span class="hljs-number">0x6FC4C7BD96E8BF25</span>, <span class="hljs-number">0x84A63D6C5D48A1C4</span>, <span class="hljs-number">0x3C37F71239BF1354</span>, <span class="hljs-number">0xE4A9BB13CA1298E3</span>, <span class="hljs-number">0xA551883F04F0DFA7</span>, <span class="hljs-number">0x138696DAE392A6B7</span>, <span class="hljs-number">0x1CFCE1EF4E954623</span>, <span class="hljs-number">0xA7EB1762FC4E1A5F</span>, <span class="hljs-number">0x22BFD0AA9873F3DF</span>, <span class="hljs-number">0x19174775129FAC47</span>, <span class="hljs-number">0x1A834072808AFF42</span>, <span class="hljs-number">0x943851D760645D1C</span>, <span class="hljs-number">0x32BD54D0A06A0D46</span>, <span class="hljs-number">0x7AC4490F2250E153</span>, <span class="hljs-number">0xD06535542CCAF560</span>, <span class="hljs-number">0xC414628E29EB1142</span>, <span class="hljs-number">0x01C3F8BAF34194B8</span>, <span class="hljs-number">0xCB51F95243105185</span>]<br><span class="hljs-built_in">input</span> = [<span class="hljs-number">0x3131313131313131</span>] * <span class="hljs-number">4</span><br>BoxA = [<span class="hljs-number">0x0000000000000002</span>, <span class="hljs-number">0x0000000000000001</span>, <span class="hljs-number">0x0000000000000007</span>, <span class="hljs-number">0x0000000000000004</span>, <span class="hljs-number">0x0000000000000008</span>, <span class="hljs-number">0x000000000000000F</span>, <span class="hljs-number">0x000000000000000E</span>, <span class="hljs-number">0x0000000000000003</span>, <span class="hljs-number">0x000000000000000D</span>, <span class="hljs-number">0x000000000000000A</span>, <span class="hljs-number">0x0000000000000000</span>, <span class="hljs-number">0x0000000000000009</span>, <span class="hljs-number">0x000000000000000B</span>, <span class="hljs-number">0x0000000000000006</span>, <span class="hljs-number">0x0000000000000005</span>, <span class="hljs-number">0x000000000000000C</span>, <span class="hljs-number">0x000000000000003F</span>, <span class="hljs-number">0x000000000000002F</span>, <span class="hljs-number">0x000000000000001F</span>, <span class="hljs-number">0x000000000000000F</span>, <span class="hljs-number">0x000000000000003E</span>, <span class="hljs-number">0x000000000000002E</span>, <span class="hljs-number">0x000000000000001E</span>, <span class="hljs-number">0x000000000000000E</span>, <span class="hljs-number">0x000000000000003D</span>, <span class="hljs-number">0x000000000000002D</span>, <span class="hljs-number">0x000000000000001D</span>, <span class="hljs-number">0x000000000000000D</span>, <span class="hljs-number">0x000000000000003C</span>, <span class="hljs-number">0x000000000000002C</span>, <span class="hljs-number">0x000000000000001C</span>, <span class="hljs-number">0x000000000000000C</span>, <span class="hljs-number">0x000000000000003B</span>, <span class="hljs-number">0x000000000000002B</span>, <span class="hljs-number">0x000000000000001B</span>, <span class="hljs-number">0x000000000000000B</span>, <span class="hljs-number">0x000000000000003A</span>, <span class="hljs-number">0x000000000000002A</span>, <span class="hljs-number">0x000000000000001A</span>, <span class="hljs-number">0x000000000000000A</span>, <span class="hljs-number">0x0000000000000039</span>, <span class="hljs-number">0x0000000000000029</span>, <span class="hljs-number">0x0000000000000019</span>, <span class="hljs-number">0x0000000000000009</span>, <span class="hljs-number">0x0000000000000038</span>, <span class="hljs-number">0x0000000000000028</span>, <span class="hljs-number">0x0000000000000018</span>, <span class="hljs-number">0x0000000000000008</span>, <span class="hljs-number">0x0000000000000037</span>, <span class="hljs-number">0x0000000000000027</span>, <span class="hljs-number">0x0000000000000017</span>, <span class="hljs-number">0x0000000000000007</span>, <span class="hljs-number">0x0000000000000036</span>, <span class="hljs-number">0x0000000000000026</span>, <span class="hljs-number">0x0000000000000016</span>, <span class="hljs-number">0x0000000000000006</span>, <span class="hljs-number">0x0000000000000035</span>, <span class="hljs-number">0x0000000000000025</span>, <span class="hljs-number">0x0000000000000015</span>, <span class="hljs-number">0x0000000000000005</span>, <span class="hljs-number">0x0000000000000034</span>, <span class="hljs-number">0x0000000000000024</span>, <span class="hljs-number">0x0000000000000014</span>, <span class="hljs-number">0x0000000000000004</span>, <span class="hljs-number">0x0000000000000033</span>, <span class="hljs-number">0x0000000000000023</span>, <span class="hljs-number">0x0000000000000013</span>, <span class="hljs-number">0x0000000000000003</span>, <span class="hljs-number">0x0000000000000032</span>, <span class="hljs-number">0x0000000000000022</span>, <span class="hljs-number">0x0000000000000012</span>, <span class="hljs-number">0x0000000000000002</span>, <span class="hljs-number">0x0000000000000031</span>, <span class="hljs-number">0x0000000000000021</span>, <span class="hljs-number">0x0000000000000011</span>, <span class="hljs-number">0x0000000000000001</span>, <span class="hljs-number">0x0000000000000030</span>, <span class="hljs-number">0x0000000000000020</span>, <span class="hljs-number">0x0000000000000010</span>, <span class="hljs-number">0x0000000000000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xorData)-<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">input</span>[i] ^= xorData[x]<br>        <span class="hljs-built_in">input</span>[i] ^= <span class="hljs-number">0x33</span><br>        <span class="hljs-built_in">input</span>[i] &amp;= <span class="hljs-number">0xffffffffffffffff</span><br>        ta = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">4</span>):<br>            tc = <span class="hljs-built_in">input</span>[i] &gt;&gt; k<br>            tb = tc &amp; <span class="hljs-number">0xf</span><br>            tb = BoxA[tb]<br>            tb = tb &lt;&lt; k<br>            ta += tb<br>        <span class="hljs-built_in">input</span>[i] = ta<br>        ta = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x40</span>):<br>            tc = <span class="hljs-built_in">input</span>[i] &gt;&gt; k<br>            tb = tc &amp; <span class="hljs-number">0x1</span><br>            td = BoxA[k+<span class="hljs-number">0x10</span>]<br>            ta += tb &lt;&lt; td<br>        <span class="hljs-built_in">input</span>[i] = ta<br>    <span class="hljs-built_in">input</span>[i] ^= <span class="hljs-number">0xcb51f95243105185</span><br>    <span class="hljs-built_in">input</span>[i] ^= <span class="hljs-number">0x33</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">input</span>[i]))<br>    <br></code></pre></td></tr></table></figure><p>根据上述写出解密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br>enData = [<span class="hljs-number">0x9C149C0FCE40E599</span>, <span class="hljs-number">0xDF4C680DCD759C04</span>, <span class="hljs-number">0xBBAFB056E52E3DC0</span>, <span class="hljs-number">0x8E299C86B8F527CB</span>]<br>xorData = [<span class="hljs-number">0x696C6F7665696368</span>, <span class="hljs-number">0xCEADD4F8344B7D10</span>, <span class="hljs-number">0xCEBF000259A5B1DB</span>, <span class="hljs-number">0xD1EE63EA2F3AB735</span>, <span class="hljs-number">0xF7EBA4C0BB3AFC6A</span>, <span class="hljs-number">0x0FCB5F041F47B9F6</span>, <span class="hljs-number">0x7BAC2E8CEFDFAE97</span>, <span class="hljs-number">0x2CE86AE8883F2D42</span>, <span class="hljs-number">0x98CDB684B9EEB0A8</span>, <span class="hljs-number">0xC8F10A0794B3A1E3</span>, <span class="hljs-number">0xA89E4C0DEA6336BB</span>, <span class="hljs-number">0xAD4DC0BA7323C479</span>, <span class="hljs-number">0xBA2FC2EC42A27960</span>, <span class="hljs-number">0x52287D00F6B53759</span>, <span class="hljs-number">0x6FC4C7BD96E8BF25</span>, <span class="hljs-number">0x84A63D6C5D48A1C4</span>, <span class="hljs-number">0x3C37F71239BF1354</span>, <span class="hljs-number">0xE4A9BB13CA1298E3</span>, <span class="hljs-number">0xA551883F04F0DFA7</span>, <span class="hljs-number">0x138696DAE392A6B7</span>, <span class="hljs-number">0x1CFCE1EF4E954623</span>, <span class="hljs-number">0xA7EB1762FC4E1A5F</span>, <span class="hljs-number">0x22BFD0AA9873F3DF</span>, <span class="hljs-number">0x19174775129FAC47</span>, <span class="hljs-number">0x1A834072808AFF42</span>, <span class="hljs-number">0x943851D760645D1C</span>, <span class="hljs-number">0x32BD54D0A06A0D46</span>, <span class="hljs-number">0x7AC4490F2250E153</span>, <span class="hljs-number">0xD06535542CCAF560</span>, <span class="hljs-number">0xC414628E29EB1142</span>, <span class="hljs-number">0x01C3F8BAF34194B8</span>, <span class="hljs-number">0xCB51F95243105185</span>]<br>BoxA = [<span class="hljs-number">0x0000000000000002</span>, <span class="hljs-number">0x0000000000000001</span>, <span class="hljs-number">0x0000000000000007</span>, <span class="hljs-number">0x0000000000000004</span>, <span class="hljs-number">0x0000000000000008</span>, <span class="hljs-number">0x000000000000000F</span>, <span class="hljs-number">0x000000000000000E</span>, <span class="hljs-number">0x0000000000000003</span>, <span class="hljs-number">0x000000000000000D</span>, <span class="hljs-number">0x000000000000000A</span>, <span class="hljs-number">0x0000000000000000</span>, <span class="hljs-number">0x0000000000000009</span>, <span class="hljs-number">0x000000000000000B</span>, <span class="hljs-number">0x0000000000000006</span>, <span class="hljs-number">0x0000000000000005</span>, <span class="hljs-number">0x000000000000000C</span>, <span class="hljs-number">0x000000000000003F</span>, <span class="hljs-number">0x000000000000002F</span>, <span class="hljs-number">0x000000000000001F</span>, <span class="hljs-number">0x000000000000000F</span>, <span class="hljs-number">0x000000000000003E</span>, <span class="hljs-number">0x000000000000002E</span>, <span class="hljs-number">0x000000000000001E</span>, <span class="hljs-number">0x000000000000000E</span>, <span class="hljs-number">0x000000000000003D</span>, <span class="hljs-number">0x000000000000002D</span>, <span class="hljs-number">0x000000000000001D</span>, <span class="hljs-number">0x000000000000000D</span>, <span class="hljs-number">0x000000000000003C</span>, <span class="hljs-number">0x000000000000002C</span>, <span class="hljs-number">0x000000000000001C</span>, <span class="hljs-number">0x000000000000000C</span>, <span class="hljs-number">0x000000000000003B</span>, <span class="hljs-number">0x000000000000002B</span>, <span class="hljs-number">0x000000000000001B</span>, <span class="hljs-number">0x000000000000000B</span>, <span class="hljs-number">0x000000000000003A</span>, <span class="hljs-number">0x000000000000002A</span>, <span class="hljs-number">0x000000000000001A</span>, <span class="hljs-number">0x000000000000000A</span>, <span class="hljs-number">0x0000000000000039</span>, <span class="hljs-number">0x0000000000000029</span>, <span class="hljs-number">0x0000000000000019</span>, <span class="hljs-number">0x0000000000000009</span>, <span class="hljs-number">0x0000000000000038</span>, <span class="hljs-number">0x0000000000000028</span>, <span class="hljs-number">0x0000000000000018</span>, <span class="hljs-number">0x0000000000000008</span>, <span class="hljs-number">0x0000000000000037</span>, <span class="hljs-number">0x0000000000000027</span>, <span class="hljs-number">0x0000000000000017</span>, <span class="hljs-number">0x0000000000000007</span>, <span class="hljs-number">0x0000000000000036</span>, <span class="hljs-number">0x0000000000000026</span>, <span class="hljs-number">0x0000000000000016</span>, <span class="hljs-number">0x0000000000000006</span>, <span class="hljs-number">0x0000000000000035</span>, <span class="hljs-number">0x0000000000000025</span>, <span class="hljs-number">0x0000000000000015</span>, <span class="hljs-number">0x0000000000000005</span>, <span class="hljs-number">0x0000000000000034</span>, <span class="hljs-number">0x0000000000000024</span>, <span class="hljs-number">0x0000000000000014</span>, <span class="hljs-number">0x0000000000000004</span>, <span class="hljs-number">0x0000000000000033</span>, <span class="hljs-number">0x0000000000000023</span>, <span class="hljs-number">0x0000000000000013</span>, <span class="hljs-number">0x0000000000000003</span>, <span class="hljs-number">0x0000000000000032</span>, <span class="hljs-number">0x0000000000000022</span>, <span class="hljs-number">0x0000000000000012</span>, <span class="hljs-number">0x0000000000000002</span>, <span class="hljs-number">0x0000000000000031</span>, <span class="hljs-number">0x0000000000000021</span>, <span class="hljs-number">0x0000000000000011</span>, <span class="hljs-number">0x0000000000000001</span>, <span class="hljs-number">0x0000000000000030</span>, <span class="hljs-number">0x0000000000000020</span>, <span class="hljs-number">0x0000000000000010</span>, <span class="hljs-number">0x0000000000000000</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enData)):<br>    enData[i] ^= <span class="hljs-number">0x33</span><br>    enData[i] ^= <span class="hljs-number">0xcb51f95243105185</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(xorData)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        ta = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x40</span>):<br>            td = BoxA[k+<span class="hljs-number">16</span>]<br>            tc = enData[i] &gt;&gt; td<br>            tb = tc &amp; <span class="hljs-number">0x1</span><br>            ta += tb &lt;&lt; k<br>        enData[i] = ta<br>        ta = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">4</span>):<br>            tc= enData[i] &gt;&gt; k<br>            tb = tc &amp; <span class="hljs-number">0xf</span><br>            tb = BoxA.index(tb)<br>            ta += tb &lt;&lt; k<br>        enData[i] = ta<br>        enData[i] ^= <span class="hljs-number">0x33</span><br>        enData[i] ^= xorData[x]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(enData[i]))<br>flag = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&quot;&lt;Q&quot;</span>, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enData)<br><span class="hljs-built_in">print</span>(flag) <span class="hljs-comment"># a9d99caef9ae999a299129c91299fc95</span><br></code></pre></td></tr></table></figure><p>在处理对比数据的时候，还是需要调试情况下去获取，并不是在一个连续的内存空间上</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023安洵杯第六届网络安全挑战赛 Re 部分WriteUp</title>
    <link href="/2023/12/30/AnXun2023/"/>
    <url>/2023/12/30/AnXun2023/</url>
    
    <content type="html"><![CDATA[<p>题目地址：<a href="https://github.com/D0g3-Lab/i-SOON_CTF_2023/tree/main/re">i-SOON_CTF_2023&#x2F;re at main · D0g3-Lab&#x2F;i-SOON_CTF_2023<br>(github.com)</a></p><p>WriteUp + 复现</p><span id="more"></span><h1 id="感觉有点简单"><a href="#感觉有点简单" class="headerlink" title="感觉有点简单"></a>感觉有点简单</h1><h2 id="0x0-初探"><a href="#0x0-初探" class="headerlink" title="0x0 初探"></a>0x0 初探</h2><p><img src="/./img/AnXun2023/572ec33a36429db576c3c431bfab6513971dbcce.png"><br>64位的驱动</p><h2 id="0x1-静态分析"><a href="#0x1-静态分析" class="headerlink" title="0x1 静态分析"></a>0x1 静态分析</h2><p>驱动文件的入口点是<code>DriverEntry</code> 主要逻辑看起来还是比较清晰的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">sub_1400016F0</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// [rsp+20h] [rbp-78h] BYREF</span><br>  PVOID NumberOfBytes_4; <span class="hljs-comment">// [rsp+28h] [rbp-70h]</span><br>  PVOID P; <span class="hljs-comment">// [rsp+30h] [rbp-68h]</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+38h] [rbp-60h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+40h] [rbp-58h]</span><br>  __int64 v6; <span class="hljs-comment">// [rsp+48h] [rbp-50h] BYREF</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v7; <span class="hljs-comment">// [rsp+50h] [rbp-48h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v8; <span class="hljs-comment">// [rsp+58h] [rbp-40h]</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UNICODE_STRING</span> <span class="hljs-title">DestinationString</span>;</span> <span class="hljs-comment">// [rsp+60h] [rbp-38h] BYREF</span><br>  <span class="hljs-type">char</span> v10[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+70h] [rbp-28h] BYREF</span><br><br>  HIDWORD(v1) = <span class="hljs-number">4096</span>;<br>  <span class="hljs-built_in">memset</span>(&amp;v6, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v6));<br>  RtlInitUnicodeString(&amp;DestinationString, <span class="hljs-string">L&quot;\\??\\C:\\Users\\Public\\flag.txt&quot;</span>);<br>  NumberOfBytes_4 = ExAllocatePool(NonPagedPool, <span class="hljs-number">0x1000</span>ui64);<br>  P = ExAllocatePool(NonPagedPool, <span class="hljs-number">0x1000</span>ui64);<br>  <span class="hljs-keyword">if</span> ( NumberOfBytes_4 &amp;&amp; P )<br>  &#123;<br>    v4 = HIDWORD(v1);<br>    <span class="hljs-built_in">memset</span>(P, <span class="hljs-number">0</span>, HIDWORD(v1));<br>    v5 = HIDWORD(v1);<br>    <span class="hljs-built_in">memset</span>(NumberOfBytes_4, <span class="hljs-number">0</span>, HIDWORD(v1));<br>    qmemcpy(v10, &amp;DestinationString, <span class="hljs-number">0x10</span>ui64);<br>    LOBYTE(v1) = sub_140001040(v10, v6, NumberOfBytes_4, (<span class="hljs-type">char</span> *)&amp;v1 + <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> ( (_BYTE)v1 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( HIDWORD(v1) &lt;= <span class="hljs-number">0xC00</span> )<br>      &#123;<br>        sub_1400011F0(NumberOfBytes_4, HIDWORD(v1), <span class="hljs-string">&quot;the_key_&quot;</span>, <span class="hljs-number">8</span>i64, v1);<br>        sub_140001360(P, NumberOfBytes_4, HIDWORD(v1));<br>        LOBYTE(v1) = sub_140001560(P, <span class="hljs-number">56</span>i64);<br>        v8 = <span class="hljs-string">&quot;tips: YES, RIGHT FLAG.   you got it!&quot;</span>;<br>        v7 = <span class="hljs-string">&quot;tips: NO , WRONG ANSWER. try again !&quot;</span>;<br>        <span class="hljs-keyword">if</span> ( (_BYTE)v1 )<br>          DbgPrint(<span class="hljs-string">&quot;tips: %s\n&quot;</span>, v8);<br>        <span class="hljs-keyword">else</span><br>          DbgPrint(<span class="hljs-string">&quot;tips: %s\n&quot;</span>, v7);<br>      &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>flag是从 <code>flag.txt</code>文件中读取，经过加密后在<code>sub_140001560</code><br>函数中进行对比，其中<code>sub_1400011F0</code>是RC4被魔改了的，<code>sub_140001360</code><br>是魔改的base64 魔改的RC4</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">RC4</span><span class="hljs-params">(_BYTE *buf, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len, _BYTE *a3, <span class="hljs-type">int</span> a4)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 ta; <span class="hljs-comment">// [rsp+20h] [rbp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int8 tb; <span class="hljs-comment">// [rsp+21h] [rbp-17h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+24h] [rbp-14h]</span><br><br>  ta = <span class="hljs-number">0</span>;<br>  tb = <span class="hljs-number">0</span>;<br>  init(a3, a4);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = len;<br>    <span class="hljs-keyword">if</span> ( i &gt;= len )<br>      <span class="hljs-keyword">break</span>;<br>    ta = (ta + <span class="hljs-number">1</span>) % <span class="hljs-number">64</span>;<br>    tb = (BOX[ta] + tb) % <span class="hljs-number">64</span>;<br>    swap(&amp;BOX[ta], &amp;BOX[tb]);<br>    buf[i] ^= (tb ^ ta) &amp; BOX[(((tb ^ ta) + BOX[tb] + BOX[ta]) % <span class="hljs-number">64</span>)];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>魔改的base64</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">Base64</span><span class="hljs-params">(<span class="hljs-type">char</span> *Base64Out, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> len)</span><br>&#123;<br>  <span class="hljs-type">int</span> ta; <span class="hljs-comment">// [rsp+0h] [rbp-88h]</span><br>  <span class="hljs-type">int</span> tb; <span class="hljs-comment">// [rsp+4h] [rbp-84h]</span><br>  <span class="hljs-type">char</span> table[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-78h] BYREF</span><br><br>  <span class="hljs-built_in">strcpy</span>(table, <span class="hljs-string">&quot;4KBbSzwWClkZ2gsr1qA+Qu0FtxOm6/iVcJHPY9GNp7EaRoDf8UvIjnL5MydTX3eh&quot;</span>);<br>  ta = <span class="hljs-number">0</span>;<br>  tb = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( ta &lt; len )<br>  &#123;<br>    Base64Out[tb] = table[buf[ta] &amp; <span class="hljs-number">0x3F</span>];      <span class="hljs-comment">// 6bits</span><br>    Base64Out[tb + <span class="hljs-number">1</span>] = table[(<span class="hljs-number">4</span> * (buf[ta + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xF</span>)) | ((buf[ta] &amp; <span class="hljs-number">0xC0</span>) &gt;&gt; <span class="hljs-number">6</span>)];<span class="hljs-comment">// 6bits</span><br>    Base64Out[tb + <span class="hljs-number">2</span>] = table[(<span class="hljs-number">16</span> * (buf[ta + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">3</span>)) | ((buf[ta + <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span>)];<span class="hljs-comment">// 6bits</span><br>    Base64Out[tb + <span class="hljs-number">3</span>] = table[(buf[ta + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xFC</span>) &gt;&gt; <span class="hljs-number">2</span>];<span class="hljs-comment">// 6bits</span><br>    ta += <span class="hljs-number">3</span>;<br>    tb += <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( len % <span class="hljs-number">3</span> == <span class="hljs-number">1</span> )<br>  &#123;<br>    Base64Out[tb - <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;=&#x27;</span>;<br>    Base64Out[tb - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;=&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( len % <span class="hljs-number">3</span> == <span class="hljs-number">2</span> )<br>  &#123;<br>    Base64Out[tb - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;=&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个base64与标准不一样的是，他是相当于三个字节为一组，按小端排序，从低位到高位取，标准的base64就相当于把数据直接转化为二进制，然后逐一取6bits</p><h2 id="0x2-求解"><a href="#0x2-求解" class="headerlink" title="0x2 求解"></a>0x2 求解</h2><p>先还原base64，然后解RC4异或回去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br>byte1400 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keyinit</span>():<br>    <span class="hljs-keyword">global</span> byte1400<br>    key = <span class="hljs-string">&#x27;the_key_&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        byte1400[i] = i<br>    <br>    keybox = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>)]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        keybox[i] = <span class="hljs-built_in">ord</span>(key[i%<span class="hljs-number">8</span>])<br>    temp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>        temp = (keybox[i] + byte1400[i] + temp) % <span class="hljs-number">64</span><br>        byte1400[i], byte1400[temp] = byte1400[temp], byte1400[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enFunc</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">global</span> byte1400<br>    temp = <span class="hljs-number">0</span><br>    ta = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buf)):<br>        temp = (temp + <span class="hljs-number">1</span>) % <span class="hljs-number">64</span><br>        ta = (byte1400[temp]+ta) % <span class="hljs-number">64</span><br>        byte1400[temp], byte1400[ta] = byte1400[ta], byte1400[temp]<br>        buf[i] ^= ((ta ^ temp) &amp; byte1400[(((ta ^ temp) + byte1400[temp] + byte1400[ta]) % <span class="hljs-number">64</span>)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deBase64</span>(<span class="hljs-params">buf</span>):<br>    res = []<br>    table = <span class="hljs-string">&#x27;4KBbSzwWClkZ2gsr1qA+Qu0FtxOm6/iVcJHPY9GNp7EaRoDf8UvIjnL5MydTX3eh&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(buf), <span class="hljs-number">4</span>):<br>            strbin = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> buf[i+k] == <span class="hljs-string">&#x27;=&#x27;</span>:<br>                    <span class="hljs-keyword">continue</span><br>                strbin += <span class="hljs-built_in">bin</span>(table.index(buf[i+k]))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>            dwordValue = <span class="hljs-built_in">int</span>(strbin, <span class="hljs-number">2</span>)<br>            res.append(dwordValue)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(): <br>    buf = <span class="hljs-string">&#x27;6zviISn2McHsa4b108v29tbKMtQQXQHA+2+sTYLlg9v2Q2Pq8SP24Uw=&#x27;</span><br>    endata = deBase64(buf)<br>    endata = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> endata)<br>    endata = struct.unpack(<span class="hljs-string">&#x27;&lt;&#123;&#125;B&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(endata)), endata)<br>    endata = <span class="hljs-built_in">list</span>(endata)<br>    <span class="hljs-comment"># 去除数组中的所有0,我们是3个字符一组，第四个字符多余了</span><br>    endata = [value <span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(endata) <span class="hljs-keyword">if</span> (index + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span> != <span class="hljs-number">0</span>]<br>    keyinit()<br>    enFunc(endata)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> endata)) <span class="hljs-comment">#D0g3&#123;608292C4-15400BA4-B3299A5C-704C292D&#125;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h1 id="牢大想你了"><a href="#牢大想你了" class="headerlink" title="牢大想你了"></a>牢大想你了</h1><h2 id="0x0-初探-1"><a href="#0x0-初探-1" class="headerlink" title="0x0 初探"></a>0x0 初探</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Mode          Length Name<br>----          ------ ----<br>d----                GalgamePro_BackUpThisFolder_ButDontShipItWithYourGame<br>d----                GalgamePro_Data<br>-a---         640000 GalgamePro.exe<br>-a---        7363584 GameAssembly.dll<br>-a---         909312 UnityCrashHandler32.exe<br>-a---       20324352 UnityPlayer.dll<br></code></pre></td></tr></table></figure><p>Unity编写的<br><img src="/./img/AnXun2023/0d894eaf6d5749b2da24e48b4f374b460f77ff5a.png"><br>运行后的画面有点抽象，就不放了</p><h2 id="0x1-分析"><a href="#0x1-分析" class="headerlink" title="0x1 分析"></a>0x1 分析</h2><p>通过检索资料，从<code>Assembly-CSharp.dll</code> 入手<br><img src="/./img/AnXun2023/5468acb1f2c7c064ddc8536ec302a3dd9b717a58.png"><br>用dnSpy32打开，找到关键函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// GameManager</span><br><span class="hljs-comment">// Token: 0x06000005 RID: 5 RVA: 0x00002240 File Offset: 0x00000440</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValueChanged</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ABBAAAABBBBAAABABBBABAAABAABAABBABBBBABAABAABAB</span>)</span><br>&#123;<br>    <span class="hljs-built_in">uint</span>[] str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[]<br>    &#123;<br>        <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span><br>    &#125;;<br>    <span class="hljs-built_in">byte</span>[] strBytes = Encoding.UTF8.GetBytes(ABBAAAABBBBAAABABBBABAAABAABAABBABBBBABAABAABAB);<br>    <span class="hljs-built_in">int</span> paddingCount = <span class="hljs-number">8</span> - strBytes.Length % <span class="hljs-number">8</span>;<br>    <span class="hljs-built_in">byte</span>[] paddedArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[strBytes.Length + paddingCount];<br>    Array.Copy(strBytes, paddedArray, strBytes.Length);<br>    <span class="hljs-built_in">uint</span>[] uintArray = <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[paddedArray.Length / <span class="hljs-number">4</span>];<br>    Buffer.BlockCopy(paddedArray, <span class="hljs-number">0</span>, uintArray, <span class="hljs-number">0</span>, paddedArray.Length);<br>    <span class="hljs-built_in">uint</span>[] encryptedData = <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[<span class="hljs-number">0</span>];<br>    AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB str2 = <span class="hljs-keyword">new</span> AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB(str);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; uintArray.Length; i += <span class="hljs-number">2</span>)<br>    &#123;<br>        encryptedData = encryptedData.Concat(str2.BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA(uintArray[i], uintArray[i + <span class="hljs-number">1</span>])).ToArray&lt;<span class="hljs-built_in">uint</span>&gt;();<br>    &#125;<br>    <span class="hljs-built_in">uint</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[]<br>    &#123;<br>        <span class="hljs-number">3363017039U</span>,<br>        <span class="hljs-number">1247970816U</span>,<br>        <span class="hljs-number">549943836U</span>,<br>        <span class="hljs-number">445086378U</span>,<br>        <span class="hljs-number">3606751618U</span>,<br>        <span class="hljs-number">1624361316U</span>,<br>        <span class="hljs-number">3112717362U</span>,<br>        <span class="hljs-number">705210466U</span>,<br>        <span class="hljs-number">3343515702U</span>,<br>        <span class="hljs-number">2402214294U</span>,<br>        <span class="hljs-number">4010321577U</span>,<br>        <span class="hljs-number">2743404694U</span><br>    &#125;;<br>    MonoBehaviour.print(array);<br>    <span class="hljs-keyword">if</span> (array.SequenceEqual(encryptedData))<br>    &#123;<br>        <span class="hljs-keyword">this</span>.BBBAAAAABABABABBABAAAAABBABBAABBABABABABBBABAAB = <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">this</span>.ABAABAAABABABABABBBBBAAABBAABBBBBAABAAAABBABABB(<span class="hljs-string">&quot;port&quot;</span>);<br>        <span class="hljs-keyword">this</span>.BAABAABBABABABABBBABBBBABBBBBBBABABBAABBABABABB(<span class="hljs-string">&quot;牢大&quot;</span>);<br>        <span class="hljs-keyword">this</span>.AAAABBABAAAABBAABAABAABAABBBAAABBBABBBBBAABABBA(<span class="hljs-string">&quot;哈哈，我没有变成耐摔王&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">this</span>.BBBAAAAABABABABBABAAAAABBABBAABBABABABABBBABAAB = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">this</span>.ABAABAAABABABABABBBBBAAABBAABBBBBAABAAAABBABABB(<span class="hljs-string">&quot;耐摔王&quot;</span>);<br>    <span class="hljs-keyword">this</span>.BAABAABBABABABABBBABBBBABBBBBBBABABBAABBABABABB(<span class="hljs-string">&quot;狂暴牢大&quot;</span>);<br>    <span class="hljs-keyword">this</span>.AAAABBABAAAABBAABAABAABAABBBAAABBBABBBBBAABABBA(<span class="hljs-string">&quot;获得成就“耐摔王”&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>查看 <code>AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB</code> 函数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AAABAAABABABAAABBABBABAAAABBAABBAABABBBBBABAAAB</span>(<span class="hljs-params"><span class="hljs-built_in">uint</span>[] BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA</span>)</span><br>&#123;<br>    <span class="hljs-keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA = BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行了赋值，而这个<code>this.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA</code>被引用的地方全是tea算法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">uint</span>[] <span class="hljs-title">BABBBBBBAAAAAABABBBAAAABBABBBAABABAAABABBAAABBA</span>(<span class="hljs-params"><span class="hljs-built_in">uint</span> ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA, <span class="hljs-built_in">uint</span> BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA</span>)</span><br>&#123;<br><span class="hljs-built_in">uint</span> v0 = ABBAABAAAAAABAAAABBBBBBABAABAAAABBBABBBAABBABBA;<br><span class="hljs-built_in">uint</span> v = BAABBAAAAABABBAABBABBAABABABABABABAAABABBBABABA;<br><span class="hljs-built_in">uint</span> sum = <span class="hljs-number">0U</span>;<br><span class="hljs-built_in">uint</span> delta = <span class="hljs-number">2654435769U</span>;<br><span class="hljs-built_in">uint</span>[] str2 = <span class="hljs-keyword">this</span>.BBABABBBABBABABAAABBBAABBAAAAAAABBBBBAABBAAAAAA;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>&#123;<br>sum += delta;<br>v0 += ((v &lt;&lt; <span class="hljs-number">4</span>) + str2[<span class="hljs-number">0</span>] ^ v + sum ^ (v &gt;&gt; <span class="hljs-number">5</span>) + str2[<span class="hljs-number">1</span>]);<br>v += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + str2[<span class="hljs-number">2</span>] ^ v0 + sum ^ (v0 &gt;&gt; <span class="hljs-number">5</span>) + str2[<span class="hljs-number">3</span>]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">uint</span>[]<br>&#123;<br>v0,<br>v<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接进行解密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 加密函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>; n &lt; len; n += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-comment">// 数据初始化</span><br>        <span class="hljs-type">uint32_t</span> v0 = v[n], v1 = v[n + <span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br>        <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>        <span class="hljs-comment">// 加密</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            sum += delta;<br>            v0 += ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>            v1 += ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        &#125;<br>        v[n] = v0; v[n + <span class="hljs-number">1</span>] = v1;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n = <span class="hljs-number">0</span>; n &lt; len; n += <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-type">uint32_t</span> v0 = v[n], v1 = v[n + <span class="hljs-number">1</span>], sum = <span class="hljs-number">0xC6EF3720</span>;<br>        <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br>        <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>            v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>            sum -= delta;<br>        &#125;<br>        v[n] = v0; v[n + <span class="hljs-number">1</span>] = v1;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出十六进制</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out_hex</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        cout &lt;&lt; hex &lt;&lt; v[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// 输出字符</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">out_str</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint8_t</span> word;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>        &#123;<br>            word = v[i] &gt;&gt; (k * <span class="hljs-number">8</span>);<br>            cout &lt;&lt; word;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 输入</span><br>    <span class="hljs-type">uint32_t</span> input[<span class="hljs-number">12</span>] = &#123; <span class="hljs-number">3363017039U</span>,<br>        <span class="hljs-number">1247970816U</span>,<br>        <span class="hljs-number">549943836U</span>,<br>        <span class="hljs-number">445086378U</span>,<br>        <span class="hljs-number">3606751618U</span>,<br>        <span class="hljs-number">1624361316U</span>,<br>        <span class="hljs-number">3112717362U</span>,<br>        <span class="hljs-number">705210466U</span>,<br>        <span class="hljs-number">3343515702U</span>,<br>        <span class="hljs-number">2402214294U</span>,<br>        <span class="hljs-number">4010321577U</span>,<br>        <span class="hljs-number">2743404694U</span> &#125;;<br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span>,<br>        <span class="hljs-number">286331153U</span> &#125;;<br>    <span class="hljs-comment">// len 为了input 的长度</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len = <span class="hljs-number">12</span>;<br><br>    <span class="hljs-comment">// 解密</span><br>    <span class="hljs-comment">// 这里的input 可更换为需要解密的数据</span><br>    <span class="hljs-built_in">decrypt</span>(input, key, len);<br>    <span class="hljs-built_in">out_hex</span>(input, len);<br>    <span class="hljs-built_in">out_str</span>(input, len);<br>&#125;<br></code></pre></td></tr></table></figure><p>得到flag</p><h1 id="你好PE"><a href="#你好PE" class="headerlink" title="你好PE"></a>你好PE</h1><h2 id="0x0-初探-2"><a href="#0x0-初探-2" class="headerlink" title="0x0 初探"></a>0x0 初探</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"> ⚡Administrator ❯❯ .\re4.exe<br>[out]: PLZ Input FLag<br>[in ]: aaaaaaaaaaaaaaaa<br>[out]: len error<br></code></pre></td></tr></table></figure><p><img src="/./img/AnXun2023/28ef44d427789ded0361852f4fb9c57a9dbeb0a6.png"> 依然是<br>PE32 并且打开IDA无法搜索到相关的字符串</p><h2 id="0x1-分析-解题"><a href="#0x1-分析-解题" class="headerlink" title="0x1 分析 &amp; 解题"></a>0x1 分析 &amp; 解题</h2><p>在IDA中发现了加载资源的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">__CheckForDebuggerJustMyCode(&amp;unk_51E018);<br>hModule = GetModuleHandleA(<span class="hljs-number">0</span>);<br>hResInfo = FindResourceA(hModule, (LPCSTR)<span class="hljs-number">101</span>, <span class="hljs-string">&quot;com&quot;</span>);<br><span class="hljs-keyword">if</span> ( hResInfo )<br>&#123;<br>  dwSize = SizeofResource(hModule, hResInfo);<br>  <span class="hljs-keyword">if</span> ( dwSize )<br>  &#123;<br>    hResData = LoadResource(hModule, hResInfo);<br></code></pre></td></tr></table></figure><p>对flag的检验是运行时加载运行的，导致我们无法搜索到相关字符串<br>通过调试，加载的地方是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">re4.exe:<span class="hljs-number">00E101</span>D0 db <span class="hljs-number">2</span>Eh<br>re4.exe:<span class="hljs-number">00E101</span>D1 db  <span class="hljs-number">47</span>h ; G<br>re4.exe:<span class="hljs-number">00E101</span>D2 db  <span class="hljs-number">4B</span>h ; K<br>re4.exe:<span class="hljs-number">00E101</span>D3 db  <span class="hljs-number">52</span>h ; R<br>re4.exe:<span class="hljs-number">00E101</span>D4 db    <span class="hljs-number">0</span><br>re4.exe:<span class="hljs-number">00E101</span>D5 db    <span class="hljs-number">0</span><br>re4.exe:<span class="hljs-number">00E101</span>D6 db  <span class="hljs-number">23</span>h ; #<br>re4.exe:<span class="hljs-number">00E101</span>D7 db  <span class="hljs-number">44</span>h ; D<br></code></pre></td></tr></table></figure><p>大小为 0x000EBE00 下面的代码可以通过反编译，似乎是跳转表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">re4.exe:<span class="hljs-number">00E101</span>DA<br>re4.exe:<span class="hljs-number">00E101</span>DA sub_E101DA proc near<br>re4.exe:<span class="hljs-number">00E101</span>DA jmp     sub_E12EA0<br>re4.exe:<span class="hljs-number">00E101</span>DA sub_E101DA endp<br>re4.exe:<span class="hljs-number">00E101</span>DA<br>re4.exe:<span class="hljs-number">00E101</span>DF<br>re4.exe:<span class="hljs-number">00E101</span>DF ; =============== S U B R O U T I N E =======================================<br>re4.exe:<span class="hljs-number">00E101</span>DF<br>re4.exe:<span class="hljs-number">00E101</span>DF ; Attributes: thunk<br>re4.exe:<span class="hljs-number">00E101</span>DF<br>re4.exe:<span class="hljs-number">00E101</span>DF sub_E101DF proc near<br>re4.exe:<span class="hljs-number">00E101</span>DF jmp     sub_E1466F<br>re4.exe:<span class="hljs-number">00E101</span>DF sub_E101DF endp<br>re4.exe:<span class="hljs-number">00E101</span>DF<br>re4.exe:<span class="hljs-number">00E101</span>DF ; ---------------------------------------------------------------------------<br>re4.exe:<span class="hljs-number">00E101</span>E4 db <span class="hljs-number">0E9</span>h<br>re4.exe:<span class="hljs-number">00E101</span>E5 db <span class="hljs-number">0F</span>6h<br>re4.exe:<span class="hljs-number">00E101</span>E6 db  <span class="hljs-number">43</span>h ; C<br></code></pre></td></tr></table></figure><p>把这一部分dump出来，用IDA打开，可以看到字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">seg000:<span class="hljs-number">000B</span>C141 aOutPlzInputFla db <span class="hljs-string">&#x27;out]: PLZ Input FLag &#x27;</span>,<span class="hljs-number">0</span>Ah,<span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C158                 dd <span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C15C                 db  <span class="hljs-number">5B</span>h ; [<br>seg000:<span class="hljs-number">000B</span>C15D aIn             db <span class="hljs-string">&#x27;in ]: &#x27;</span>,<span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C164                 align <span class="hljs-number">8</span><br>seg000:<span class="hljs-number">000B</span>C168                 db  <span class="hljs-number">25</span>h ; %<br>seg000:<span class="hljs-number">000B</span>C169                 db  <span class="hljs-number">73</span>h ; s<br>seg000:<span class="hljs-number">000B</span>C16A                 align <span class="hljs-number">4</span><br>seg000:<span class="hljs-number">000B</span>C16C                 db  <span class="hljs-number">5B</span>h ; [<br>seg000:<span class="hljs-number">000B</span>C16D aOutLenError    db <span class="hljs-string">&#x27;out]: len error&#x27;</span>,<span class="hljs-number">0</span>Ah,<span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C17E                 align <span class="hljs-number">10</span>h<br>seg000:<span class="hljs-number">000B</span>C180                 dd <span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C184                 db  <span class="hljs-number">5B</span>h ; [<br>seg000:<span class="hljs-number">000B</span>C185 aOutRightFlag   db <span class="hljs-string">&#x27;out]: RIGHT FLAG&#x27;</span>,<span class="hljs-number">0</span>Ah,<span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C197                 align <span class="hljs-number">4</span><br>seg000:<span class="hljs-number">000B</span>C198                 dd <span class="hljs-number">0</span><br>seg000:<span class="hljs-number">000B</span>C19C                 db  <span class="hljs-number">5B</span>h ; [<br>seg000:<span class="hljs-number">000B</span>C19D aOutWrongFlag   db <span class="hljs-string">&#x27;out]: WRONG FLAG&#x27;</span>,<span class="hljs-number">0</span>Ah,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>根据这里面<code>PLZ Input Flag</code>的偏移地址，结合起始地址，计算出此时字符串的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Python&gt;<span class="hljs-number">0xE101D0</span> + <span class="hljs-number">0xBC141</span><br><span class="hljs-number">0xecc311</span><br></code></pre></td></tr></table></figure><p>在此处下一个硬件断点，F9，程序运行到了这里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( _bittest(&amp;dword_E0B368, <span class="hljs-number">1u</span>) )<br>&#123;<br>  qmemcpy(a1, Src, Size);<br>  <span class="hljs-keyword">return</span> a1;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对资源赋值到了 <code>0x01010000</code>处，在这里重新找到字符串的地址，下访问断点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">Python&gt;<span class="hljs-number">0x1010000</span> + <span class="hljs-number">0xBC141</span><br><span class="hljs-number">0x10cc141</span><br></code></pre></td></tr></table></figure><p>通过断点的命中，发现下面这段代码其实在对资源进行处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_D45870</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> __int8 **a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  __CheckForDebuggerJustMyCode(&amp;unk_E0E02A);<br>  <span class="hljs-keyword">if</span> ( !a1 || !a1[<span class="hljs-number">3</span>] || !a2 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  a1[<span class="hljs-number">6</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !sub_D3FED7((<span class="hljs-type">int</span>)a1, a2) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !sub_D3EB77((<span class="hljs-type">int</span>)a1, a2) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !sub_D3F478((<span class="hljs-type">int</span>)a1) )<br>    <span class="hljs-keyword">goto</span> LABEL_17;<br>  <span class="hljs-keyword">if</span> ( !sub_D41057(a1) )<br>    <span class="hljs-keyword">goto</span> LABEL_17;<br>  a1[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> __int8 *)sub_D40D69(<span class="hljs-number">0</span>, *a1, (<span class="hljs-type">int</span>)a1[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> ( !sub_D4016B(a1) )<br>    <span class="hljs-keyword">goto</span> LABEL_17;<br>  <span class="hljs-keyword">if</span> ( !sub_D409DB(a1) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !a3 || sub_D3ED5C((<span class="hljs-type">int</span>)a1, <span class="hljs-number">1</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>LABEL_17:<br>  sub_D3EFD2(a1);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>sub_D3ED5C</code>函数中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">.text:<span class="hljs-number">00</span>D44B9D<br>.text:<span class="hljs-number">00</span>D44B9D loc_D44B9D:<br>.text:<span class="hljs-number">00</span>D44B9D push    <span class="hljs-number">0</span><br>.text:<span class="hljs-number">00</span>D44B9F mov     eax, [ebp+arg_4]<br>.text:<span class="hljs-number">00</span>D44BA2 push    eax<br>.text:<span class="hljs-number">00</span>D44BA3 mov     ecx, [ebp+arg_0]<br>.text:<span class="hljs-number">00</span>D44BA6 mov     edx, [ecx]<br>.text:<span class="hljs-number">00</span>D44BA8 push    edx<br>.text:<span class="hljs-number">00</span>D44BA9 call    [ebp+var_8]<br>.text:<span class="hljs-number">00</span>D44BAC add     esp, <span class="hljs-number">0</span>Ch<br>.text:<span class="hljs-number">00</span>D44BAF mov     eax, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>代码块call了资源中的内容，调试这部分，可以调到关键函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1005F820</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// [esp+0h] [ebp-D8h]</span><br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// [esp+0h] [ebp-D8h]</span><br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// [esp+0h] [ebp-D8h]</span><br>  _DWORD *v4; <span class="hljs-comment">// [esp+D0h] [ebp-8h]</span><br><br>  sub_1005B16F(byte_1014000F);<br>  ((<span class="hljs-type">void</span> (__stdcall *)(_DWORD, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>))kernel32_VirtualAlloc)(<span class="hljs-number">0</span>, <span class="hljs-number">65548</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">4</span>);<br>  v4 = (_DWORD *)sub_1005A260();<br>  <span class="hljs-keyword">if</span> ( !v4 )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  v4[<span class="hljs-number">1</span>] = <span class="hljs-number">0x10000</span>;<br>  *v4 = <span class="hljs-number">0</span>;<br>  v4[<span class="hljs-number">2</span>] = v4 + <span class="hljs-number">3</span>;<br>  sub_10059572(v4[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>, v4[<span class="hljs-number">1</span>]);<br>  print((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;[out]: PLZ Input FLag \n&quot;</span>, v1);<br>  print((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;[in ]: &quot;</span>, v2);<br>  <span class="hljs-built_in">scanf</span>(&amp;aS_1, v4[<span class="hljs-number">2</span>]);<br>  *v4 = sub_1005B5BB(v4[<span class="hljs-number">2</span>]);<br>  <span class="hljs-keyword">if</span> ( *v4 == <span class="hljs-number">41</span> )                              <span class="hljs-comment">// flag长度为41</span><br>  &#123;<br>    *v4 = <span class="hljs-number">48</span>;<br>    sub_1005A242(v4);                           <span class="hljs-comment">// 加密</span><br>    <span class="hljs-keyword">if</span> ( sub_10058AA0(v4[<span class="hljs-number">2</span>], &amp;unk_1013C008, <span class="hljs-number">48</span>) )<span class="hljs-comment">// 对比</span><br>      print((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;[out]: WRONG FLAG\n&quot;</span>, v3);<br>    <span class="hljs-keyword">else</span><br>      print((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;[out]: RIGHT FLAG\n&quot;</span>, v3);<br>    ((<span class="hljs-type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="hljs-type">int</span>))kernel32_VirtualFree)(v4, <span class="hljs-number">0</span>, <span class="hljs-number">49152</span>);<br>    sub_1005A260();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    print((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;[out]: len error\n&quot;</span>, v3);<br>    ((<span class="hljs-type">void</span> (__stdcall *)(_DWORD *, _DWORD, <span class="hljs-type">int</span>))kernel32_VirtualFree)(v4, <span class="hljs-number">0</span>, <span class="hljs-number">49152</span>);<br>    sub_1005A260();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然调到了，但是还是一步一步调过来的…</p><p>根据调试情况，写出正向脚本和逆向脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shld</span>(<span class="hljs-params">a1, a2</span>):<br>    <span class="hljs-keyword">return</span> ((a1 &lt;&lt; <span class="hljs-number">1</span>) | (a2 &gt;&gt; <span class="hljs-number">31</span>)) &amp; <span class="hljs-number">0xffffffff</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shl</span>(<span class="hljs-params">a1</span>):<br>    <span class="hljs-keyword">return</span> (a1 &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shr</span>(<span class="hljs-params">a1</span>):<br>    <span class="hljs-keyword">return</span> (a1 &gt;&gt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">en</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>):<br>        ta = buf[i]<br>        tb = buf[i + <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-keyword">if</span> (tb &amp; <span class="hljs-number">0x80000000</span> == <span class="hljs-number">0x80000000</span>):<br>                tb = shld(tb, ta)<br>                ta = shl(ta)<br>                ta = (<span class="hljs-number">0x54AA4A9</span> ^ ta) &amp; <span class="hljs-number">0xffffffff</span><br>            <span class="hljs-keyword">else</span>:<br>                tb = shld(tb, ta)<br>                ta = shl(ta)<br>        buf[i] = ta<br>        buf[i + <span class="hljs-number">1</span>] = tb<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">buf</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>):<br>        ta = buf[i]<br>        tb = buf[i+<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            <span class="hljs-comment"># 判断是否异或: 左移之后最后一位必然是0，如果和9进行异或，那么最后一位必然是1，以此为标准</span><br>            <span class="hljs-keyword">if</span> (ta &amp; <span class="hljs-number">1</span>):<br>                ta = (<span class="hljs-number">0x54AA4A9</span> ^ ta) &amp; <span class="hljs-number">0xffffffff</span><br>                ta = shr(ta) | ((tb &amp; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">31</span>)<br>                <span class="hljs-comment"># 在此情况下，tb最高位必然为1</span><br>                tb = shr(tb) | (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">31</span>)<br>            <span class="hljs-keyword">else</span>:<br>                ta = shr(ta) | ((tb &amp; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">31</span>)<br>                <span class="hljs-comment"># 在此情况下 tb 最高位必然为 0</span><br>                tb = shr(tb)<br>        buf[i] = ta<br>        buf[i + <span class="hljs-number">1</span>] = tb<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    cmp = [<span class="hljs-number">0x2976B84D</span>, <span class="hljs-number">0x599EA9F5</span>, <span class="hljs-number">0xC4B15655</span>, <span class="hljs-number">0x302C212F</span>, <span class="hljs-number">0x177879B3</span>, <span class="hljs-number">0xDBF7EDA8</span>, <span class="hljs-number">0xDBF053E1</span>, <span class="hljs-number">0x5E5103E9</span>, <span class="hljs-number">0xDF00C109</span>, <span class="hljs-number">0xC1FC96F0</span>, <span class="hljs-number">0x9562E6B5</span>, <span class="hljs-number">0x00000001</span>]<br>    de(cmp)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cmp)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(cmp[i]), end=<span class="hljs-string">&#x27;, &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br>    flag = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&quot;&lt;I&quot;</span>, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cmp)<br>    <span class="hljs-built_in">print</span>(flag)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>得到flag</p><h1 id="你见过蓝色的小鲸鱼"><a href="#你见过蓝色的小鲸鱼" class="headerlink" title="你见过蓝色的小鲸鱼"></a>你见过蓝色的小鲸鱼</h1><h2 id="0x0-初探-3"><a href="#0x0-初探-3" class="headerlink" title="0x0 初探"></a>0x0 初探</h2><p><img src="/./img/AnXun2023/eedc34832d1e05ddace17d869cd8d98d5b86a98d.png"> 32位PE<br><img src="/./img/AnXun2023/55acef8173eca95dc4c74093df42cc3fc6a3d6c8.png"><br>在readme中，给了User：UzBtZTBuZV9EMGcz</p><h2 id="0x1-分析-1"><a href="#0x1-分析-1" class="headerlink" title="0x1 分析"></a>0x1 分析</h2><p>使用IDA打开，一时还找不到关键函数在哪，由于该程序使用了Win32API，可以尝试从这里下手，打MessageBoxA的断点<br><img src="/./img/AnXun2023/5454e7f76edd4afb8031a726eeb020c727f3787c.png"><br>成功断下来，回溯堆栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0019F</span>398  <span class="hljs-number">00457018</span>  sub_456EE0+<span class="hljs-number">138</span><br></code></pre></td></tr></table></figure><p>这个函数里面我们看到了正确或错误的相关字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __thiscall <span class="hljs-title function_">sub_456EE0</span><span class="hljs-params">(<span class="hljs-type">void</span> *this)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2[<span class="hljs-number">28</span>]; <span class="hljs-comment">// [esp+D0h] [ebp-54h] BYREF</span><br>  CHAR Text[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [esp+ECh] [ebp-38h] BYREF</span><br>  CHAR Caption[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [esp+100h] [ebp-24h] BYREF</span><br>  <span class="hljs-type">void</span> *v5; <span class="hljs-comment">// [esp+118h] [ebp-Ch]</span><br><br>  v5 = this;<br>  __CheckForDebuggerJustMyCode(&amp;unk_52102F);<br>  <span class="hljs-built_in">strcpy</span>(Caption, <span class="hljs-string">&quot;tip&quot;</span>);<br>  <span class="hljs-built_in">strcpy</span>(Text, <span class="hljs-string">&quot;You Get It!&quot;</span>);<br>  <span class="hljs-built_in">strcpy</span>(v2, <span class="hljs-string">&quot;Wrong user/passwd&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( *((_DWORD *)v5 + <span class="hljs-number">2</span>) != *((_DWORD *)v5 + <span class="hljs-number">3</span>)<br>    || j__memcmp(*(<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)v5, *((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)v5 + <span class="hljs-number">1</span>), *((_DWORD *)v5 + <span class="hljs-number">3</span>)) )<br>  &#123;<br>    <span class="hljs-keyword">return</span> MessageBoxA(<span class="hljs-number">0</span>, v2, Caption, <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> MessageBoxA(<span class="hljs-number">0</span>, Text, Caption, <span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数只有一个交叉引用，引用的函数即为主要处理函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">Func</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">void</span> *v4; <span class="hljs-comment">// [esp+10h] [ebp-154h]</span><br>  <span class="hljs-type">void</span> *v5; <span class="hljs-comment">// [esp+24h] [ebp-140h]</span><br>  CHAR *Passwd; <span class="hljs-comment">// [esp+114h] [ebp-50h]</span><br>  CHAR *Name; <span class="hljs-comment">// [esp+120h] [ebp-44h]</span><br>  HWND DlgItem; <span class="hljs-comment">// [esp+12Ch] [ebp-38h]</span><br>  HWND hWnd; <span class="hljs-comment">// [esp+138h] [ebp-2Ch]</span><br>  <span class="hljs-type">int</span> PasswdLen; <span class="hljs-comment">// [esp+144h] [ebp-20h]</span><br>  <span class="hljs-type">int</span> NameLen; <span class="hljs-comment">// [esp+150h] [ebp-14h]</span><br><br>  __CheckForDebuggerJustMyCode(&amp;unk_52105E);<br>  hWnd = GetDlgItem((HWND)argc, <span class="hljs-number">1003</span>);<br>  DlgItem = GetDlgItem((HWND)argc, <span class="hljs-number">1004</span>);<br>  NameLen = GetWindowTextLengthA(hWnd);<br>  PasswdLen = GetWindowTextLengthA(DlgItem);<br>  Name = (CHAR *)j__malloc(__CFADD__(NameLen, <span class="hljs-number">16</span>) ? <span class="hljs-number">-1</span> : NameLen + <span class="hljs-number">16</span>);<br>  result = (<span class="hljs-type">int</span>)j__malloc(__CFADD__(PasswdLen, <span class="hljs-number">16</span>) ? <span class="hljs-number">-1</span> : PasswdLen + <span class="hljs-number">16</span>);<br>  Passwd = (CHAR *)result;<br>  <span class="hljs-keyword">if</span> ( Name &amp;&amp; result )<br>  &#123;<br>    GetWindowTextA(hWnd, Name, NameLen + <span class="hljs-number">16</span>);<br>    GetWindowTextA(DlgItem, Passwd, PasswdLen + <span class="hljs-number">16</span>);<br>    v5 = operator new(<span class="hljs-number">0x10</span>u);<br>    <span class="hljs-keyword">if</span> ( v5 )<br>    &#123;<br>      sub_451B43(<span class="hljs-number">0x10</span>u);<br>      v4 = (<span class="hljs-type">void</span> *)sub_450CE3(v5);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v4 = <span class="hljs-number">0</span>;<br>    &#125;<br>    sub_44FC2B(&amp;unk_51D38C, <span class="hljs-number">0x10</span>u);<br>    sub_45126F(Name, NameLen, (<span class="hljs-type">int</span>)Passwd, PasswdLen);<br>    sub_450199(v4);                             <span class="hljs-comment">// right/wrong</span><br>    j__free(Name);<br>    j__free(Passwd);<br>    result = (<span class="hljs-type">int</span>)v4;<br>    <span class="hljs-keyword">if</span> ( v4 )<br>      <span class="hljs-keyword">return</span> sub_44F77B(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>在加密函数中发现了算法关键字</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">_DWORD *__thiscall <span class="hljs-title function_">sub_456C20</span><span class="hljs-params">(_DWORD *this, <span class="hljs-type">void</span> *Src, <span class="hljs-type">size_t</span> a3)</span><br>&#123;<br>  __CheckForDebuggerJustMyCode(&amp;unk_52102D);<br>  sub_45176A(Src, a3);<br>  *this = &amp;Bl0wFish::`vftable<span class="hljs-number">&#x27;</span>;<br>  this[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> this;<br>&#125;<br></code></pre></td></tr></table></figure><p>故去Github搜索BlowFish，发现和加密过程中用到的数组数据一致，猜测是未进行魔改算法，通过对比算法，猜测是以Nmae为密钥，对Password进行加密，</p><h2 id="0x2-求解-1"><a href="#0x2-求解-1" class="headerlink" title="0x2 求解"></a>0x2 求解</h2><p>使用python进行求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> Blowfish  <br>  <br><span class="hljs-comment"># Blowfish  </span><br>key = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x55</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7A</span>])  <br>enc_b = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x11</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x47</span>])  <br>  <br>cipher = Blowfish.new(key, Blowfish.MODE_ECB)  <br>dec = cipher.decrypt(enc_b)  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dec:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)  <br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><p>得到密码为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">QHRoZWJsdWVmMXNo<br></code></pre></td></tr></table></figure><p>检验一下<br><img src="/./img/AnXun2023/826bbd70d6ddedf98898ab2be6f5094b5cb94c39.png"></p><h1 id="mobilego"><a href="#mobilego" class="headerlink" title="mobilego"></a>mobilego</h1><h2 id="0x0-初探-4"><a href="#0x0-初探-4" class="headerlink" title="0x0 初探"></a>0x0 初探</h2><p>这是一个Android逆向，通过jeb查看，主要逻辑主要是go编写的so文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-comment">/* synthetic */</span> <span class="hljs-keyword">void</span> m44lambda$onCreate$<span class="hljs-number">0</span>$comexamplemobilegoMainActivity(View v) &#123;<br>    <span class="hljs-keyword">if</span> (Game.checkflag(<span class="hljs-built_in">this</span>.editText.getText().toString()).equals(getResources().getString(R.string.cmp))) &#123;<br>        Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;yes your flag is right&quot;</span>, <span class="hljs-number">0</span>).show();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;No No No&quot;</span>, <span class="hljs-number">0</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x1-动态调试"><a href="#0x1-动态调试" class="headerlink" title="0x1 动态调试"></a>0x1 动态调试</h2><p>使用jadx直接进行调试 在<code>check_flag</code>调用处打断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">000003c0: <span class="hljs-number">5430</span> <span class="hljs-number">0200</span>               <span class="hljs-number">0000</span>: iget-object         v0, p0, Lcom/example/mobilego/MainActivity;-&gt;editText:Landroid/widget/EditText; # field@<span class="hljs-number">0002</span><br>000003c4: <span class="hljs-number">6e10</span> <span class="hljs-number">0200</span> <span class="hljs-number">0000</span>          <span class="hljs-number">0002</span>: invoke-virtual      &#123;v0&#125;, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable; # method@<span class="hljs-number">0002</span><br>000003ca: 0c00                    <span class="hljs-number">0005</span>: move-result-object  v0<br>000003cc: <span class="hljs-number">6e10</span> <span class="hljs-number">1100</span> <span class="hljs-number">0000</span>          <span class="hljs-number">0006</span>: invoke-virtual      &#123;v0&#125;, Ljava/lang/Object;-&gt;toString()Ljava/lang/String; # method@<span class="hljs-number">0011</span><br>000003d2: 0c00                    0009: move-result-object  v0<br>000003d4: <span class="hljs-number">7110</span> 0f00 <span class="hljs-number">0000</span>          000a: invoke-<span class="hljs-keyword">static</span>       &#123;v0&#125;, Lgame/Game;-&gt;checkflag(Ljava/lang/String;)Ljava/lang/String; # method@<span class="hljs-number">000f</span><br></code></pre></td></tr></table></figure><p>断下来之后，单步调试，在变量窗口可以看到我们的输入经过加密后的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">1k38a274jf56hlcbd09eg<br></code></pre></td></tr></table></figure><p>还有要对比的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">49021</span>&#125;5f919038b440139g74b7Dc88330e5d&#123;<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>可以看到，其实就是打乱了次序的，我们再构建一次输入，检验一下打乱的次序是不是固定的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">1K38A274JF56HLCBD09EG<br></code></pre></td></tr></table></figure><p>局部换成大写之后，依然是一致的，现在我们构建一个没有重复的输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl<br></code></pre></td></tr></table></figure><p>经过加密后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ViLdOlJTePKcMYZFQBSHUCXWIaAGkfbDghjNER<br></code></pre></td></tr></table></figure><p>写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ta = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl&#x27;</span><br>tb = <span class="hljs-string">&#x27;ViLdOlJTePKcMYZFQBSHUCXWIaAGkfbDghjNER&#x27;</span><br>order = [tb.index(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ta]<br>enflag = <span class="hljs-string">&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span><br>flag = [enflag[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> order]<br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(flag)<br><span class="hljs-built_in">print</span>(flag)<span class="hljs-comment">#D0g3&#123;4c3b5903d11461f94478b7302980e958&#125;</span><br></code></pre></td></tr></table></figure><h2 id="0x2-静态分析"><a href="#0x2-静态分析" class="headerlink" title="0x2 静态分析"></a>0x2 静态分析</h2><p>使用IDA分析so文件，打开后发现没有去除符号，直接搜索<br><code>check</code>，找到<code>mobile_go_Checkflag</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// mobile_go.Checkflag</span><br><span class="hljs-type">char</span> *__usercall mobile_go_Checkflag@&lt;X0&gt;(<span class="hljs-type">unsigned</span> __int8 *a1@&lt;X0&gt;, <span class="hljs-type">unsigned</span> __int64 a2@&lt;X1&gt;)<br>&#123;<br>  __int64 v2; <span class="hljs-comment">// x28</span><br>  __int64 *v3; <span class="hljs-comment">// x29</span><br>  __int64 v4; <span class="hljs-comment">// x30</span><br>  _QWORD *v5; <span class="hljs-comment">// x0</span><br>  _QWORD *v6; <span class="hljs-comment">// x1</span><br>  <span class="hljs-type">unsigned</span> __int8 *buffer; <span class="hljs-comment">// x0</span><br>  __int64 Now; <span class="hljs-comment">// x1</span><br>  __int64 numA; <span class="hljs-comment">// x2</span><br>  <span class="hljs-type">unsigned</span> __int64 RandB; <span class="hljs-comment">// x0</span><br>  <span class="hljs-type">unsigned</span> __int8 *temp; <span class="hljs-comment">// x3</span><br>  <span class="hljs-type">unsigned</span> __int8 ta; <span class="hljs-comment">// w4</span><br>  __int64 *v14; <span class="hljs-comment">// [xsp+0h] [xbp-C8h] BYREF</span><br>  __int64 v15; <span class="hljs-comment">// [xsp+8h] [xbp-C0h]</span><br>  <span class="hljs-type">unsigned</span> __int8 *v16; <span class="hljs-comment">// [xsp+10h] [xbp-B8h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v17; <span class="hljs-comment">// [xsp+18h] [xbp-B0h]</span><br>  int64 SeedNum; <span class="hljs-comment">// [xsp+40h] [xbp-88h]</span><br>  <span class="hljs-type">unsigned</span> __int64 RandA; <span class="hljs-comment">// [xsp+48h] [xbp-80h]</span><br>  __int64 NumB; <span class="hljs-comment">// [xsp+50h] [xbp-78h]</span><br>  <span class="hljs-type">unsigned</span> __int64 length; <span class="hljs-comment">// [xsp+58h] [xbp-70h]</span><br>  <span class="hljs-type">unsigned</span> __int8 *buf; <span class="hljs-comment">// [xsp+80h] [xbp-48h]</span><br>  _QWORD *object[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [xsp+88h] [xbp-40h] BYREF</span><br><br>  <span class="hljs-keyword">while</span> ( (<span class="hljs-type">unsigned</span> __int64)object &lt;= *(_QWORD *)(v2 + <span class="hljs-number">16</span>) )<br>  &#123;<br>LABEL_10:<br>    v16 = a1;<br>    v17 = a2;<br>    runtime_morestack_noctxt();                 <span class="hljs-comment">// 处理栈的扩展</span><br>    a1 = v16;<br>    a2 = v17;<br>  &#125;<br>  v15 = v4;<br>  v14 = v3;<br>  v3 = (__int64 *)&amp;v14;<br>  SeedNum = Num2023;<br>  object[<span class="hljs-number">0</span>] = (_QWORD *)runtime_newobject();    <span class="hljs-comment">// 用于分配新的内存以创建一个对象</span><br>  math_rand__ptr_rngSource_Seed(object[<span class="hljs-number">0</span>], SeedNum);<span class="hljs-comment">// 种子</span><br>  v5 = runtime_assertI2I2((__int64)&amp;RTYPE_rand_Source64, off_EE580, (__int64)object[<span class="hljs-number">0</span>], v15, v16, v17);<br>  object[<span class="hljs-number">5</span>] = <span class="hljs-number">0LL</span>;<br>  object[<span class="hljs-number">6</span>] = <span class="hljs-number">0LL</span>;<br>  object[<span class="hljs-number">1</span>] = off_EE580;<br>  object[<span class="hljs-number">2</span>] = object[<span class="hljs-number">0</span>];<br>  object[<span class="hljs-number">3</span>] = v5;<br>  object[<span class="hljs-number">4</span>] = v6;<br>  buffer = (<span class="hljs-type">unsigned</span> __int8 *)runtime_stringtoslicebyte();<br>  buf = buffer;<br>  length = Now;<br>  numA = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( Now &gt; numA )<br>  &#123;<br>    NumB = numA;<br>    RandA = math_rand__ptr_Rand_Intn(Now);      <span class="hljs-comment">// 生成随机数</span><br>    RandB = math_rand__ptr_Rand_Intn(length);<br>    Now = length;<br>    <span class="hljs-keyword">if</span> ( RandA &gt;= length )<br>      <span class="hljs-keyword">goto</span> LABEL_9;<br>    temp = buf;<br>    ta = buf[RandA];<br>    <span class="hljs-keyword">if</span> ( RandB &gt;= length )<br>    &#123;<br>      runtime_panicIndex();<br>LABEL_9:<br>      a1 = (<span class="hljs-type">unsigned</span> __int8 *)runtime_panicIndex();<br>      <span class="hljs-keyword">goto</span> LABEL_10;<br>    &#125;<br>    buf[RandA] = buf[RandB];<br>    temp[RandB] = ta;<br>    numA = NumB + <span class="hljs-number">1</span>;<br>    buffer = temp;<br>  &#125;<br>  <span class="hljs-keyword">return</span> runtime_slicebytetostring(<span class="hljs-number">0LL</span>, buffer, Now, v15, v16, v17);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中这个种子是在<code>mobile_go_init_0</code> 中进行定义的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// mobile_go.init.0</span><br>__int64 __usercall mobile_go_init_0@&lt;X0&gt;()<br>&#123;<br>  __int64 result; <span class="hljs-comment">// x0</span><br><br>  result = <span class="hljs-number">2023LL</span>;<br>  Num2023 = <span class="hljs-number">2023LL</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概意思就是通过生成伪随机数来达到打乱顺序的作用，而这个伪随机数的种子就是<br>2023 写一个go程序打印出这个过程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math/rand&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 设置随机数种子为2023</span><br>    rand.Seed(<span class="hljs-number">2023</span>)<br><br>    <span class="hljs-comment">// 循环38次，每次生成两个随机数并打印</span><br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">38</span>; i++ &#123;<br>        randomNumber1 := rand.Intn(<span class="hljs-number">38</span>) <span class="hljs-comment">// 生成0到38的随机整数</span><br>        randomNumber2 := rand.Intn(<span class="hljs-number">38</span>) <span class="hljs-comment">// 生成0到38的随机整数</span><br><br>        fmt.Printf(<span class="hljs-string">&quot;[%d,%d],&quot;</span>, randomNumber1, randomNumber2)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">[<span class="hljs-number">11</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">37</span>],[<span class="hljs-number">24</span>,<span class="hljs-number">18</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">30</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">29</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">13</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">37</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">28</span>,<span class="hljs-number">28</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">23</span>,<span class="hljs-number">22</span>],[<span class="hljs-number">21</span>,<span class="hljs-number">26</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">19</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">34</span>],[<span class="hljs-number">37</span>,<span class="hljs-number">17</span>],[<span class="hljs-number">27</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">31</span>,<span class="hljs-number">30</span>],[<span class="hljs-number">14</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">35</span>,<span class="hljs-number">34</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">14</span>,<span class="hljs-number">25</span>],[<span class="hljs-number">26</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">28</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">15</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">18</span>],[<span class="hljs-number">24</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">35</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">36</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">25</span>,<span class="hljs-number">21</span>],[<span class="hljs-number">11</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">27</span>,<span class="hljs-number">28</span>],<br></code></pre></td></tr></table></figure><p>然后再JEB中找到对比的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">string</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">app_name</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7F0F001C</span>;  <span class="hljs-comment">// string:app_name &quot;mobilego&quot;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7F0F0028</span>;  <span class="hljs-comment">// string:cmp &quot;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&quot;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>进行还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">order = [[<span class="hljs-number">11</span>,<span class="hljs-number">14</span>],[<span class="hljs-number">15</span>,<span class="hljs-number">37</span>],[<span class="hljs-number">24</span>,<span class="hljs-number">18</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">30</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">29</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">13</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">37</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">28</span>,<span class="hljs-number">28</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">23</span>,<span class="hljs-number">22</span>],[<span class="hljs-number">21</span>,<span class="hljs-number">26</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">19</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">34</span>],[<span class="hljs-number">37</span>,<span class="hljs-number">17</span>],[<span class="hljs-number">27</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">31</span>,<span class="hljs-number">30</span>],[<span class="hljs-number">14</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">35</span>,<span class="hljs-number">34</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">30</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">14</span>,<span class="hljs-number">25</span>],[<span class="hljs-number">26</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">28</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">15</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">13</span>,<span class="hljs-number">18</span>],[<span class="hljs-number">24</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">35</span>,<span class="hljs-number">24</span>],[<span class="hljs-number">36</span>,<span class="hljs-number">27</span>],[<span class="hljs-number">25</span>,<span class="hljs-number">21</span>],[<span class="hljs-number">11</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">27</span>,<span class="hljs-number">28</span>]]<br>cmp = <span class="hljs-built_in">bytearray</span>(<span class="hljs-string">b&#x27;49021&#125;5f919038b440139g74b7Dc88330e5d&#123;6&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cmp)):<br>    ta = cmp[order[<span class="hljs-built_in">len</span>(cmp)-<span class="hljs-number">1</span>-i][<span class="hljs-number">0</span>]]<br>    cmp[order[<span class="hljs-built_in">len</span>(cmp)-<span class="hljs-number">1</span>-i][<span class="hljs-number">0</span>]] = cmp[order[<span class="hljs-built_in">len</span>(cmp)-<span class="hljs-number">1</span>-i][<span class="hljs-number">1</span>]]<br>    cmp[order[<span class="hljs-built_in">len</span>(cmp)-<span class="hljs-number">1</span>-i][<span class="hljs-number">1</span>]] = ta<br><span class="hljs-built_in">print</span>(cmp) <span class="hljs-comment"># bytearray(b&#x27;D0g3&#123;4c3b5903d11461f94478b7302980e958&#125;&#x27;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3CTF 2023 RE Writeup</title>
    <link href="/2023/05/30/D3CTF2023/"/>
    <url>/2023/05/30/D3CTF2023/</url>
    
    <content type="html"><![CDATA[<p>D3CTF 2023 Reverse 题解</p><span id="more"></span><h1 id="d3RC4"><a href="#d3RC4" class="headerlink" title="d3RC4"></a>d3RC4</h1><h2 id="涉及知识"><a href="#涉及知识" class="headerlink" title="涉及知识"></a>涉及知识</h2><ul><li>子进程调试</li><li>RC4</li><li>管道读写</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过对比算法，得到 <code>main</code> 函数的内容</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">pipe</span>(pipedes);<br>  __isoc99_scanf(&amp;format, input);<br>  input_len = <span class="hljs-built_in">strlen</span>(input);<br>  <span class="hljs-built_in">RC4_init</span>(::a1);<br>  <span class="hljs-built_in">RC4_init0</span>(::a1, ::a2, ::a3);<br>  <span class="hljs-built_in">RC4_crypt</span>(::a1, input_len, xor_data);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; input_len; ++i )<br>    input[i] ^= xor_data[i];<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; input_len; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( input[j] != cmp_data_0[j] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际调试过程中，发现<code>main</code> 函数执行之后，又会执行其他函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">_init_array和_fini_array中的函数分别会在main函数之前和之后被调用执行。<br><br>_init_array里sub_1A20函数做了一些变量的初始化和字符串的解密。<br><br>_fini_array里sub_16C5函数是题目主要逻辑<br></code></pre></td></tr></table></figure><p>函数 <code>sub_16c5</code> 里面用了子进程进行了最后的加密和检验<br><img src="/./img/D3CTF/5d788b5cf59d6c3814bb4ca62c4794abca5db47b.png"><br>如果只看加密操作，那基本就全是 Xor 操作</p><h2 id="调试子进程求解"><a href="#调试子进程求解" class="headerlink" title="调试子进程求解"></a>调试子进程求解</h2><p>因为加密的操作基本都是固定值加密，所以可以尝试提取数据，然后进行异或还原<br>这里的难点就是进行子进程调试。</p><p>详细记录一下子进程调试的过程 首先，在第一个 fork 函数处打上断点<br><img src="/./img/D3CTF/4c04f0f218d655ec31353021eecd8ff3ee3a0b53.png"><br>断下来之后，在子进程第一个代码块上patch 一个死循环<br><img src="/./img/D3CTF/0deb3b8a49095d463f992f049e4dd7b17f83f5e5.png"> 将<br><code>call RC4_init0</code> patch 为 <code>jmp 0x55CBB4614875</code> ，即始终跳转到第一条指令<br>反调试得到的代码也出现了 <code>while(1)</code><br><img src="/./img/D3CTF/efa65ad64b05c23d56a1d4bc0989cbf10a831ad7.png">\</p><p>然后直接 F9 ，让程序一直跑，此时<code>Debugger</code> -&gt; <code>Detach The process</code><br>然后在刚刚我们修改的地方打上断点，然后再 Attach 上进程<br><img src="/./img/D3CTF/7968cb33faa9136bb1c3d78fbb4a6d67ef9fa5ea.png"><br>断下来后，将指令改回去<br><img src="/./img/D3CTF/8e79b60ac31be42a0b6d97147c5ba53e4518266a.png"><br>此时就可以调试子进程了 提取出数据之后，逆向异或就可以得到 flag 了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEN 36</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">de_xor</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;arr)[LEN],<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;key)[LEN])</span></span>&#123;<br>    <span class="hljs-type">int</span> i,k;<br>    <span class="hljs-keyword">for</span>(i=LEN<span class="hljs-number">-2</span>; i&gt;=<span class="hljs-number">0</span>; i -= <span class="hljs-number">2</span>)&#123;<br>        arr[i+<span class="hljs-number">1</span>] = arr[i] - (key[i+<span class="hljs-number">1</span>] ^ arr[i+<span class="hljs-number">1</span>]);<br>        arr[i] = (arr[i] ^ key[i]) - arr[i+<span class="hljs-number">1</span>];<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">en_xor</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;arr)[LEN], <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;key)[LEN])</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;LEN; j += <span class="hljs-number">2</span>)&#123;<br>        arr[j] = (arr[j] + arr[j + <span class="hljs-number">1</span>]) ^ key[j];<br>        arr[j + <span class="hljs-number">1</span>] = key[j + <span class="hljs-number">1</span>] ^ (arr[j] - arr[j + <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">xor_de</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;arr)[LEN], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> (&amp;key)[LEN])</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt; LEN ; i++)&#123;<br>        arr[i] ^= key[i];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_state</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* arr, <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;len; i++)&#123;<br>        <span class="hljs-comment">// cout &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; setw(2) &lt;&lt; hex &lt;&lt; (int)*(arr+i) &lt;&lt; &quot; &quot;;</span><br>        cout &lt;&lt; *(arr+i);<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> en_data[] = &#123;<span class="hljs-number">0x75</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x83</span>&#125;;<br>    <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[] = &#123;<span class="hljs-number">0x35</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xD3</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> de_data_0[] = &#123;<span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x1F</span>&#125;;<br><br>    <span class="hljs-built_in">de_xor</span>(de_data_0, key);<br><br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> input[] = &#123;<span class="hljs-number">0x89</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x6C</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key_1[] = &#123;<span class="hljs-number">0xB8</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x5D</span>&#125;;<br>    <span class="hljs-built_in">xor_de</span>(de_data_0, key_1);<br>    <span class="hljs-built_in">print_state</span>(de_data_0, <span class="hljs-number">36</span>); <br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="爆破求解"><a href="#爆破求解" class="headerlink" title="爆破求解"></a>爆破求解</h2><p>这是官方wp<br>给出的解法，前提是在看懂算法的情况下还原加密逻辑，省去素数筛部分代码，爆破可见字符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> enc[] = &#123;<span class="hljs-number">247</span>, <span class="hljs-number">95</span>, <span class="hljs-number">231</span>, <span class="hljs-number">176</span>, <span class="hljs-number">154</span>, <span class="hljs-number">180</span>, <span class="hljs-number">224</span>, <span class="hljs-number">231</span>, <span class="hljs-number">158</span>, <span class="hljs-number">5</span>, <span class="hljs-number">254</span>, <span class="hljs-number">216</span>, <span class="hljs-number">53</span>, <span class="hljs-number">92</span>, <span class="hljs-number">114</span>, <span class="hljs-number">224</span>, <span class="hljs-number">134</span>, <span class="hljs-number">222</span>, <span class="hljs-number">115</span>, <span class="hljs-number">159</span>, <span class="hljs-number">154</span>, <span class="hljs-number">246</span>, <span class="hljs-number">13</span>, <span class="hljs-number">220</span>, <span class="hljs-number">200</span>, <span class="hljs-number">79</span>, <span class="hljs-number">194</span>, <span class="hljs-number">164</span>, <span class="hljs-number">122</span>, <span class="hljs-number">181</span>, <span class="hljs-number">227</span>, <span class="hljs-number">205</span>, <span class="hljs-number">96</span>, <span class="hljs-number">157</span>, <span class="hljs-number">4</span>, <span class="hljs-number">31</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> rc4_s[<span class="hljs-number">256</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> rc4_key[] = <span class="hljs-string">&quot;We1c0m3_t0_d^3ctf&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_init_s</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *s)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        s[i] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_shuffle</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *key, <span class="hljs-type">int</span> key_len)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++) &#123;<br>        j = (j + s[i] + key[i%key_len])%<span class="hljs-number">256</span>;<br>        <span class="hljs-type">int</span> tmp = s[i];<br>        s[i] = s[j];<br>        s[j] = tmp;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4_gen_keystream</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">int</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *key_stream)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span> (len) &#123;<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;   <br>        j = (j + s[i]) % <span class="hljs-number">256</span>;<br>        <span class="hljs-type">int</span> tmp = s[i];<br>        s[i] = s[j];<br>        s[j] = tmp;<br>        key_stream[++cnt] = s[(s[i] + s[j]) % <span class="hljs-number">256</span>];<br>        len -= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keystream1[<span class="hljs-number">50</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keystream[<span class="hljs-number">50</span>];<br>    <span class="hljs-built_in">rc4_init_s</span>(rc4_s);<br>    <span class="hljs-built_in">rc4_shuffle</span>(rc4_s, rc4_key, <span class="hljs-number">17</span>);<br>    <span class="hljs-built_in">rc4_gen_keystream</span>(rc4_s, <span class="hljs-number">36</span>, keystream1);<br>    <span class="hljs-comment">// keystream1: 184, 134, 68, 99, 181, 216, 28, 149, 209, 126, 112, 94, 188, 86, 99, 52, 40, 144, 21, 248, 77, 82, 157, 30, 245, 31, 200, 100, 82, 27, 100, 15, 36, 147, 64, 93</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> primes[] = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>&#125;;<br>    <span class="hljs-built_in">memcpy</span>(rc4_key+<span class="hljs-number">17</span>, primes, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">rc4_shuffle</span>(rc4_s, rc4_key, <span class="hljs-number">27</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>        <span class="hljs-built_in">rc4_gen_keystream</span>(rc4_s, <span class="hljs-number">36</span>, keystream);<br>    &#125;<br>    <span class="hljs-comment">// keystream: 53, 75, 160, 96, 8, 80, 165, 241, 51, 151, 178, 19, 203, 76, 13, 207, 163, 124, 87, 83, 226, 169, 101, 78, 14, 199, 122, 15, 253, 181, 158, 180, 51, 249, 97, 211</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36</span>; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a1 = <span class="hljs-number">0</span>; a1 &lt; <span class="hljs-number">0xff</span>; a1++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a2 = <span class="hljs-number">0</span>; a2 &lt; <span class="hljs-number">0xff</span>; a2++) &#123;<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a10 = a1;<br>                <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a20 = a2;<br>                a1 = a1 ^ keystream1[i];<br>                a2 = a2 ^ keystream1[i+<span class="hljs-number">1</span>];<br>                a1 = (a1 + a2) ^ keystream[i];<br>                a2 = (a1 - a2) ^ keystream[i+<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> ( a1 == enc[i] &amp;&amp; a2 == enc[i+<span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c&quot;</span>, a10, a20);<br>                &#125;<br>                a1 = a10;<br>                a2 = a20;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="d3syscall"><a href="#d3syscall" class="headerlink" title="d3syscall"></a>d3syscall</h1><h2 id="涉及知识-1"><a href="#涉及知识-1" class="headerlink" title="涉及知识"></a>涉及知识</h2><ul><li>syscall</li><li>虚拟机</li><li>shell 命令</li></ul><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>这道题同样也在 <code>init_array</code> 处进行了修改<br><img src="/./img/D3CTF/e36219783633f2e2ec849d6eeb4e7337a28cf2b9.png"> 断在<br><code>sub_1830</code> 的最后，查看寄存器地址，发现了一些路径字符串<br><img src="/./img/D3CTF/8b4c47c79940f68329cf1050cb772902a66383db.png"></p><p>程序首先从<code>/proc/kallsyms</code>中获取了系统调用表的地址，通过参数传递到内核模块中<br>我们将 <code>my_module</code> 复制过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp /tmp/my_module /mnt/d/CTF/d^3ctf/d3syscall_attachment2/my_module<br></code></pre></td></tr></table></figure><p>在这里面找到了一些调用号相关的<br><img src="/./img/D3CTF/07ceb7802c1349a2df9bc8a3300322e526988f71.png"><br>如果只看这个的话，还是有点抽象了<img src="/./img/D3CTF/a61ee6ee9dd697d4c636d29aeaa4cd5d1af0565b.png"><br>我们可以通过Linux 自带命令 <code>strace</code> 打印出syscall 调用情况： 先运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./d3syscall<br></code></pre></td></tr></table></figure><p>查看进程，发现有三个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef<br></code></pre></td></tr></table></figure><p><img src="/./img/D3CTF/f17bc54ed41eb2bbdb864a884fabe53c12d1a8b4.png"></p><p>用 <code>strace</code> 查看 <code>./d3syscall</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo strace -p 1467 -o 1.txt<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs shell">read(0, &quot;11111111111111111111111111\n&quot;, 1024) = 27<br>syscall_0x14f(0x1, 0, 0x3131313131313131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3131313131313131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0x3131313131313131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x51e7647e, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe0b4140a, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe6978f27, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0x1, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x6, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x53a35337, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x9840294d, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5eae4751, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x1, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x153(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x3131313131313131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0x3131, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x51e7647e, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe0b4140a, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe6978f27, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0x1, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x6, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x53a35337, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x9840294d, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5eae4751, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x1, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x153(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x51e7647e, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe0b4140a, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0x1, 0xe6978f27, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0x1, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0x1, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x2, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x6, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x4, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x53a35337, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x2, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x2, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x9840294d, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0, 0x3, 0x1, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x14f(0x1, 0, 0x5eae4751, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x1, 0x3, 0, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0x3, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x152(0, 0x2, 0x3, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x150(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x151(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x153(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>syscall_0x154(0, 0, 0x2, 0xffffffffffffff80, 0, 0x55c3d6f28890) = -1 ENOSYS (Function not implemented)<br>newfstatat(1, &quot;&quot;, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0xb), ...&#125;, AT_EMPTY_PATH) = 0<br>unlink(&quot;/tmp/my_module&quot;)                = -1 ENOENT (No such file or directory)<br>delete_module(&quot;my_module&quot;, O_NONBLOCK)  = -1 ENOENT (No such file or directory)<br>write(1, &quot;Congratulations!&quot;, 16)        = 16<br>lseek(0, -1, SEEK_CUR)                  = -1 ESPIPE (Illegal seek)<br>exit_group(0)                           = ?<br>+++ exited with 0 +++<br></code></pre></td></tr></table></figure><p>这样就得到了一个完整的记录 结合上面，分析这几个调用号所代表的含义。</p><p>既然是个虚拟机，至少得有栈和寄存器 我们以此来分析 首先通过特折最明显<code>reset</code> 来确定 寄存器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__int64 <span class="hljs-title">reset</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  result = _fentry__();<br>  reg[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  reg[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>  reg[<span class="hljs-number">2</span>] = <span class="hljs-number">0LL</span>;<br>  reg[<span class="hljs-number">3</span>] = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后通过 check 函数确定 stack</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> __fastcall <span class="hljs-title">check</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v0; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// rsi</span><br>  __int64 v2; <span class="hljs-comment">// r12</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp-50h] [rbp-50h]</span><br>  __int64 v4; <span class="hljs-comment">// [rsp-48h] [rbp-48h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp-40h] [rbp-40h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp-38h] [rbp-38h]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp-30h] [rbp-30h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp-28h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp-20h] [rbp-20h]</span><br>  __int64 v10; <span class="hljs-comment">// [rsp-8h] [rbp-8h] BYREF</span><br><br>  _fentry__();<br>  v0 = <span class="hljs-number">1LL</span>;<br>  v9 = __readgsqword(<span class="hljs-number">0x28</span>u);<br>  v3 = <span class="hljs-number">0xB0800699CB89CC89</span>LL;<br>  v4 = <span class="hljs-number">0x4764FD523FA00B19</span>LL;<br>  v5 = <span class="hljs-number">0x396A7E6DF099D700</span>LL;<br>  v6 = <span class="hljs-number">0xB115D56BCDEAF50A</span>LL;<br>  v7 = <span class="hljs-number">0x2521513C985791F4</span>LL;<br>  v8 = <span class="hljs-number">0xB03C06AF93AD0BE</span>LL;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v1 = (<span class="hljs-type">int</span>)v0 - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">5</span> )<br>      _ubsan_handle_out_of_bounds(&amp;off_1880, v1);<br>    v2 = *(&amp;v10 + v0 - <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)(<span class="hljs-type">int</span>)v0 &gt; <span class="hljs-number">0x27</span> )<br>      _ubsan_handle_out_of_bounds(&amp;off_1860, (<span class="hljs-type">int</span>)v0);<br>    <span class="hljs-keyword">if</span> ( v2 != stack[v0] )                      <span class="hljs-comment">// 比较数据累加时，不可能是对寄存器操作，所以应该是 stack</span><br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( ++v0 == <span class="hljs-number">7</span> )<br>    &#123;<br>      reg[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>      reg[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>      reg[<span class="hljs-number">2</span>] = <span class="hljs-number">0LL</span>;<br>      reg[<span class="hljs-number">3</span>] = <span class="hljs-number">0LL</span>;<br>      reg[<span class="hljs-number">5</span>] = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逐条分析之后得到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">::v4[<span class="hljs-number">0x14F</span>] = mov;<br>v4[<span class="hljs-number">0x150</span>] = alu;                              <span class="hljs-comment">// 运算器</span><br>v4[<span class="hljs-number">0x151</span>] = push;<br>v4[<span class="hljs-number">0x152</span>] = pop;<br>v4[<span class="hljs-number">0x153</span>] = reset;<br>v4[<span class="hljs-number">0x154</span>] = check;<br></code></pre></td></tr></table></figure><p>写出对应的函数 这里用 python<br>写出这个过程呢，不太一定能一次成功，因为代码量不太多，我们可以尝试先不直接还原代码，而是打印出每个指令，然后逆向分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局变量</span><br>reg = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>stack = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_mov</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-keyword">if</span> a1 == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mov reg[<span class="hljs-subst">&#123;a2&#125;</span>], <span class="hljs-subst">&#123;a3&#125;</span>&#x27;</span> )<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mov reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>]&#x27;</span> )<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_alu</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-keyword">if</span> a1 == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;sub reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>] &#x27;</span>)<br>    <span class="hljs-keyword">elif</span> a1 == <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mul reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>] &#x27;</span>)<br><br>    <span class="hljs-keyword">elif</span> a1 == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;xor reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>]&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> a1 == <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;shl reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>]&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> a1 == <span class="hljs-number">5</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;shr reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>]&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;add reg[<span class="hljs-subst">&#123;a2&#125;</span>], reg[<span class="hljs-subst">&#123;a3&#125;</span>]&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_push</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-keyword">if</span> a1:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;push reg[<span class="hljs-subst">&#123;a2&#125;</span>]&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;push <span class="hljs-subst">&#123;a2&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_pop</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;pop reg[<span class="hljs-subst">&#123;a1&#125;</span>]&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_reset</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;reset&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        reg[i] = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">syscall_check</span>(<span class="hljs-params">a1, a2, a3</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;check&#x27;</span>)<br>    cmp_data = [<span class="hljs-number">0xB0800699CB89CC89</span>, <span class="hljs-number">0x4764FD523FA00B19</span>, <span class="hljs-number">0x396A7E6DF099D700</span>, <span class="hljs-number">0xB115D56BCDEAF50A</span>, <span class="hljs-number">0x2521513C985791F4</span>, <span class="hljs-number">0xB03C06AF93AD0BE</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        <span class="hljs-keyword">if</span>(cmp_data[i] == stack[i]):<br>            <span class="hljs-keyword">break</span><br>    syscall_reset(a1, a2, a3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x3837363534333231</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x6867666564636261</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x6867666564636261</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x51e7647e</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0b4140a</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe6978f27</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x6</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x53a35337</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x9840294d</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5eae4751</span>)<br>    syscall_alu(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_reset(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x3132333435363738</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x6162636465666768</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x6162636465666768</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x51e7647e</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0b4140a</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe6978f27</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x6</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x53a35337</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x9840294d</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5eae4751</span>)<br>    syscall_alu(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_reset(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x4847464544434241</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x4142434445464847</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x4142434445464847</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x51e7647e</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0b4140a</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe6978f27</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x6</span>)<br>    syscall_alu(<span class="hljs-number">0x4</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x53a35337</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5</span>)<br>    syscall_alu(<span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x9840294d</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_mov(<span class="hljs-number">0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x1</span>)<br>    syscall_mov(<span class="hljs-number">0x1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x5eae4751</span>)<br>    syscall_alu(<span class="hljs-number">0x1</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0</span>)<br>    syscall_alu(<span class="hljs-number">0x3</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_pop(<span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>)<br>    syscall_alu(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_push(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_reset(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br>    syscall_check(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0x2</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs code">mov reg[0], 4050765991979987505<br>mov reg[1], 7523094288207667809<br>push 1<br>mov reg[2], reg[0]<br>mov reg[1], 3<br>shl reg[2], reg[1]<br>mov reg[1], 1374119038<br>add reg[2], reg[1]<br>mov reg[3], reg[0]<br>mov reg[1], 3<br>mul reg[3], reg[1]<br>mov reg[1], 3769897994<br>add reg[3], reg[1]<br>xor reg[2], reg[3]<br>mov reg[3], reg[0]<br>mov reg[1], 3868692263<br>add reg[3], reg[1]<br>xor reg[2], reg[3]<br>pop reg[1]<br>add reg[1], reg[2]<br>push 1<br>push 0<br>mov reg[2], reg[1]<br>mov reg[0], 6<br>shl reg[2], reg[0]<br>mov reg[0], 1403212599<br>add reg[2], reg[0]<br>mov reg[3], reg[1]<br>mov reg[0], 5<br>mul reg[3], reg[0]<br>mov reg[0], 2554341709<br>add reg[3], reg[0]<br>xor reg[2], reg[3]<br>mov reg[3], reg[1]<br>mov reg[0], 1588479825<br>sub reg[3], reg[0]<br>xor reg[2], reg[3]<br>pop reg[0]<br>add reg[0], reg[2]<br>push 0<br>reset<br>mov reg[0], 3544952156018063160<br>mov reg[1], 7017280452245743464<br>push 1<br>mov reg[2], reg[0]<br>mov reg[1], 3<br>shl reg[2], reg[1]<br>mov reg[1], 1374119038<br>add reg[2], reg[1]<br>mov reg[3], reg[0]<br>mov reg[1], 3<br>mul reg[3], reg[1]<br>mov reg[1], 3769897994<br>add reg[3], reg[1]<br>xor reg[2], reg[3]<br>mov reg[3], reg[0]<br>mov reg[1], 3868692263<br>add reg[3], reg[1]<br>xor reg[2], reg[3]<br>pop reg[1]<br>add reg[1], reg[2]<br>push 1<br>push 0<br>mov reg[2], reg[1]<br>mov reg[0], 6<br>shl reg[2], reg[0]<br>mov reg[0], 1403212599<br>add reg[2], reg[0]<br>mov reg[3], reg[1]<br>mov reg[0], 5<br>mul reg[3], reg[0]<br>mov reg[0], 2554341709<br>add reg[3], reg[0]<br>xor reg[2], reg[3]<br>mov reg[3], reg[1]<br>mov reg[0], 1588479825<br>sub reg[3], reg[0]<br>xor reg[2], reg[3]<br>pop reg[0]<br>add reg[0], reg[2]<br>push 0<br>reset<br>mov reg[0], 5208208757389214273<br>mov reg[1], 4702394921427290183<br>push 1<br>mov reg[2], reg[0]<br>mov reg[1], 3<br>shl reg[2], reg[1]<br>mov reg[1], 1374119038<br>add reg[2], reg[1]<br>reset<br>check<br>reset<br></code></pre></td></tr></table></figure><p>分析后，每次加密是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">b += ((a &lt;&lt; <span class="hljs-number">3</span>) + <span class="hljs-number">1374119038</span>) ^ (a * <span class="hljs-number">3</span> + <span class="hljs-number">3769897994</span>) ^ (a + <span class="hljs-number">3868692263</span>)<br>a += ((b &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1403212599</span>) ^ (b * <span class="hljs-number">5</span> + <span class="hljs-number">2554341709</span>) ^ (b - <span class="hljs-number">1588479825</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意这里的 a b 并不是按顺序来的，而是传参顺序，也就是 b对应 arr[i],<br>a对应arr[i+1]</p></blockquote><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>因为参与 a 加密的b是已经加密的结果，所以解密只需要简单的调换顺序，加号变减号就行了</p><p>用 C++ 会比较好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> &amp;a, <span class="hljs-type">uint64_t</span> &amp;b)</span></span>&#123;<br>    a -= ((b &lt;&lt; <span class="hljs-number">6</span>) + <span class="hljs-number">1403212599</span>) ^ (b * <span class="hljs-number">5</span> + <span class="hljs-number">2554341709</span>) ^ (b - <span class="hljs-number">1588479825</span>);<br>    b -= ((a &lt;&lt; <span class="hljs-number">3</span>) + <span class="hljs-number">1374119038</span>) ^ (a * <span class="hljs-number">3</span> + <span class="hljs-number">3769897994</span>) ^ (a + <span class="hljs-number">3868692263</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.8s%.8s&quot;</span>, &amp;a, &amp;b);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">uint64_t</span> cmp_data[] = &#123;<span class="hljs-number">0xB0800699CB89CC89</span>, <span class="hljs-number">0x4764FD523FA00B19</span>, <span class="hljs-number">0x396A7E6DF099D700</span>, <span class="hljs-number">0xB115D56BCDEAF50A</span>, <span class="hljs-number">0x2521513C985791F4</span>, <span class="hljs-number">0xB03C06AF93AD0BE</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">decode</span>(cmp_data[i+<span class="hljs-number">1</span>], cmp_data[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到 flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">d3ctf&#123;cef9b994-2547-4844-ac0d-a097b75806a0&#125;<br></code></pre></td></tr></table></figure><p>还有其他师傅是直接还原整个逻辑，然后用z3进行解题的</p><h1 id="d3recover"><a href="#d3recover" class="headerlink" title="d3recover"></a>d3recover</h1><h2 id="涉及知识-2"><a href="#涉及知识-2" class="headerlink" title="涉及知识"></a>涉及知识</h2><ul><li>符号恢复</li><li>Bindiff</li></ul><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>给了两个附件 分别用 ida 打开，发现 1.0 是去掉了符号的，而 2.0 保留了符号<br>用 Bindiff 恢复 1.0 的符号 恢复之后，通过字符串关键字 <code>check</code> ，可以找到check 函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs cpp">    <span class="hljs-built_in">Py_XDECREF</span>(Item);<br>    <span class="hljs-built_in">Py_XDECREF</span>(v16);<br>    <span class="hljs-built_in">Py_XDECREF</span>(v17);<br>    _Pyx_AddTraceback(<span class="hljs-string">&quot;d3recover_ver1.check&quot;</span>, v7, v6, v18);<br>    v11 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">goto</span> LABEL_61;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v19 == <span class="hljs-number">32</span> )<br>  &#123;<br>    Item = _Pyx_PyObject_CallNoArg(&amp;unk_A7B7A0);<br>    <span class="hljs-keyword">if</span> ( !Item )<br>    &#123;<br>      v18 = str_d3recover_ver1_py;<br>      v6 = <span class="hljs-number">32</span>;<br>      v7 = <span class="hljs-number">2109</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_60;<br>    &#125;<br>    v9 = Item;<br>    Item = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0LL</span>; i &lt;= <span class="hljs-number">31</span>; ++i )<br>    &#123;<br>      Item = _Pyx_PyInt_From_long(i);<br>      <span class="hljs-keyword">if</span> ( !Item )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">33</span>;<br>        v7 = <span class="hljs-number">2122</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      v23 = v10;<br>      v10 = Item;<br>      <span class="hljs-built_in">Py_XDECREF</span>(v23);<br>      Item = _Pyx_PyObject_GetItem(a2, Item);<br>      <span class="hljs-keyword">if</span> ( !Item )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">34</span>;<br>        v7 = <span class="hljs-number">2134</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">PyType_HasFeature</span>(*(_QWORD *)(Item + <span class="hljs-number">8</span>), <span class="hljs-number">0x10000000</span>LL) )<br>        v2 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">sub_5A374B</span>(Item);<br>      <span class="hljs-keyword">else</span><br>        v2 = <span class="hljs-built_in">sub_5A3D44</span>(Item);<br>      v24 = v2;<br>      <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">0xFFFFFFFF</span>LL )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">34</span>;<br>        v7 = <span class="hljs-number">2136</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(Item);<br>      Item = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)_Pyx_PyByteArray_Append(v9, v24 ^ <span class="hljs-number">0x23</span>u) == <span class="hljs-number">-1</span> )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">34</span>;<br>        v7 = <span class="hljs-number">2138</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0LL</span>; j &lt;= <span class="hljs-number">29</span>; ++j )<br>    &#123;<br>      Item = _Pyx_PyInt_From_long(j);<br>      <span class="hljs-keyword">if</span> ( !Item )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">35</span>;<br>        v7 = <span class="hljs-number">2149</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      v22 = v10;<br>      v10 = Item;<br>      <span class="hljs-built_in">Py_XDECREF</span>(v22);<br>      Item = _Pyx_PyObject_GetItem(v9, Item);<br>      <span class="hljs-keyword">if</span> ( !Item )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2161</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      v16 = _Pyx_PyInt_AddObjC(v10, qword_ABC1E8, <span class="hljs-number">2LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>      <span class="hljs-keyword">if</span> ( !v16 )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2163</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      v17 = _Pyx_PyObject_GetItem(v9, v16);<br>      <span class="hljs-keyword">if</span> ( !v17 )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2165</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(v16);<br>      v16 = <span class="hljs-built_in">sub_4E0BB0</span>(Item, v17);<br>      <span class="hljs-keyword">if</span> ( !v16 )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2168</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(Item);<br>      Item = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-built_in">Py_DECREF</span>(v17);<br>      v17 = _Pyx_PyInt_AndObjC(v16, qword_ABC220, <span class="hljs-number">255LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>      <span class="hljs-keyword">if</span> ( !v17 )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2172</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(v16);<br>      v16 = _Pyx_PyInt_XorObjC(v17, qword_ABC218, <span class="hljs-number">84LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>      <span class="hljs-keyword">if</span> ( !v16 )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2175</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(v17);<br>      v17 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)<span class="hljs-built_in">PyObject_SetItem</span>(v9, v10, v16) &lt; <span class="hljs-number">0</span> )<br>      &#123;<br>        v18 = str_d3recover_ver1_py;<br>        v6 = <span class="hljs-number">36</span>;<br>        v7 = <span class="hljs-number">2178</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;<br>      <span class="hljs-built_in">Py_DECREF</span>(v16);<br>      v16 = <span class="hljs-number">0LL</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( *(_QWORD *)(qword_ABC050 + <span class="hljs-number">24</span>) == qword_ABC2A0 )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( qword_ABC2A8 )<br>      &#123;<br>        <span class="hljs-built_in">Py_INCREF</span>(qword_ABC2A8);<br>        BuiltinName = qword_ABC2A8;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        BuiltinName = _Pyx_GetBuiltinName(qword_ABC0E0);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      BuiltinName = _Pyx__GetModuleGlobalName(qword_ABC0E0, &amp;qword_ABC2A0, &amp;qword_ABC2A8);<br>    &#125;<br>    v17 = BuiltinName;<br>    <span class="hljs-keyword">if</span> ( !BuiltinName )<br>    &#123;<br>      v18 = str_d3recover_ver1_py;<br>      v6 = <span class="hljs-number">37</span>;<br>      v7 = <span class="hljs-number">2189</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_60;<br>    &#125;<br>    v13 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">Py_IS_TYPE</span>(BuiltinName, &amp;unk_A7D100) )<br>    &#123;<br>      v13 = *(_QWORD *)(v17 + <span class="hljs-number">24</span>);<br>      <span class="hljs-keyword">if</span> ( v13 )<br>      &#123;<br>        v20 = *(_QWORD *)(v17 + <span class="hljs-number">16</span>);<br>        <span class="hljs-built_in">Py_INCREF</span>(v13);<br>        <span class="hljs-built_in">Py_INCREF</span>(v20);<br>        v21 = v17;<br>        v17 = v20;<br>        <span class="hljs-built_in">Py_DECREF</span>(v21);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v13 )<br>      v4 = _Pyx_PyObject_Call2Args(v17, v13, v9);<br>    <span class="hljs-keyword">else</span><br>      v4 = _Pyx_PyObject_CallOneArg(v17, v9);<br>    v16 = v4;<br>    <span class="hljs-built_in">Py_XDECREF</span>(v13);<br>    Item = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">if</span> ( !v16 )<br>    &#123;<br>      v18 = str_d3recover_ver1_py;<br>      v6 = <span class="hljs-number">37</span>;<br>      v7 = <span class="hljs-number">2203</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_60;<br>    &#125;<br>    <span class="hljs-built_in">Py_DECREF</span>(v17);<br>    v17 = <span class="hljs-number">0LL</span>;<br>    v8 = _Pyx_PyBytes_Equals(v16, qword_ABC0D0, <span class="hljs-number">2LL</span>);<br>    <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">0</span> )<br>    &#123;<br>      v18 = str_d3recover_ver1_py;<br>      v6 = <span class="hljs-number">37</span>;<br>      v7 = <span class="hljs-number">2206</span>;<br>      <span class="hljs-keyword">goto</span> LABEL_60;<br>    &#125;<br>    <span class="hljs-built_in">Py_DECREF</span>(v16);<br>    <span class="hljs-built_in">Py_XDECREF</span>(<span class="hljs-number">0LL</span>);<br>    <span class="hljs-keyword">if</span> ( v8 )<br>    &#123;<br>      <span class="hljs-built_in">Py_INCREF</span>(&amp;qword_A7AEA0);<br>      v11 = &amp;qword_A7AEA0;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">Py_INCREF</span>(&amp;qword_A7AEC0);<br>      v11 = &amp;qword_A7AEC0;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">Py_XDECREF</span>(<span class="hljs-number">0LL</span>);<br>    <span class="hljs-built_in">Py_INCREF</span>(&amp;qword_A7AEC0);<br>    v11 = &amp;qword_A7AEC0;<br>  &#125;<br>LABEL_61:<br>  <span class="hljs-built_in">Py_XDECREF</span>(v9);<br>  <span class="hljs-built_in">Py_XDECREF</span>(v10);<br>  <span class="hljs-keyword">return</span> v11;<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来有点抽象，但是仔细看会发现，操作基本都以符号名的形式呈现了<br><img src="/./img/D3CTF/5aa84c6abc7a25fde348db49ad70c386bb114895.png"></p><p>但是具体形式还是不容易弄清楚，动调一下</p><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><p>加密后的正确flag以 base64 的形式存在<br><img src="/./img/D3CTF/862dd2b039dca167c42a9e98e850f33b34563283.png"> 转化后为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">d3 c7 ce ca 3f 84 db b3 b6 b9 80 ea d0 cd 72 fc d8 30 95 db e2 d8 92 08 c1 c6 c5 f4 07 ec 02 5e<br></code></pre></td></tr></table></figure><p>z3 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">en</span>(<span class="hljs-params">arr</span>):<br>    length = <span class="hljs-number">32</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        arr[i] = arr[i] ^ <span class="hljs-number">0x23</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>        arr[i] = ((arr[i] + arr[i+<span class="hljs-number">2</span>]) &amp; <span class="hljs-number">0xff</span>) ^ <span class="hljs-number">0x54</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">de</span>(<span class="hljs-params">arr</span>):<br>    flag = [BitVec(<span class="hljs-string">&#x27;flag[%d]&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>    s = Solver()<br>    en(flag)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        s.add(flag[i] == arr[i])<br>    <span class="hljs-keyword">if</span>(s.check() == sat):  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solver!&quot;</span>)  <br>        result = s.model() <br>        <span class="hljs-built_in">print</span>(result)<br>        <br>    <span class="hljs-keyword">else</span>:  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No Solver!!&quot;</span>)  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    enflag = <span class="hljs-string">b&#x27;08fOyj+E27O2uYDq0M1y/Ngwldvi2JIIwcbF9AfsAl4=&#x27;</span><br>    dec = base64.b64decode(enflag)<br>    de(dec)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><span class="hljs-comment"># flag&#123;y0U_RE_Ma5t3r_0f_R3vocery!&#125;</span><br></code></pre></td></tr></table></figure><h1 id="d3sky"><a href="#d3sky" class="headerlink" title="d3sky"></a>d3sky</h1><h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><ul><li>反调试</li><li>RC4</li><li>虚拟机</li><li>idapython</li></ul><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>Tls 回调里面有反调试</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> __stdcall <span class="hljs-title">isDebugger__</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len_key; <span class="hljs-comment">// eax</span><br><br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">IsDebuggerPresent</span>() )<br>    aYunzh1junalkai[<span class="hljs-number">5</span>] = <span class="hljs-number">49</span>;<br>  len_key = <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;YunZhiJun&quot;</span>);<br>  <span class="hljs-built_in">RC4_init</span>(sbox, <span class="hljs-string">&quot;YunZhiJun&quot;</span>, len_key);<br>  <span class="hljs-built_in">rc4_crypt</span>(sbox, &amp;data, <span class="hljs-number">74u</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>没有调试的情况下，会更改字符串，而调试的状态下不会更改。<br>然后进行了RC4加密 并且还有除零异常<br><img src="/./img/D3CTF/75a36254413c21ce18069041837586526d93b836.png"> 可以通过<br>attach 绕过</p><p>回调里面的函数加密的结果然后再进行解密 main 函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> len; <span class="hljs-comment">// [esp+0h] [ebp-24h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+Ch] [ebp-18h]</span><br>  <span class="hljs-type">unsigned</span> __int16 index_3; <span class="hljs-comment">// [esp+14h] [ebp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int16 index_1; <span class="hljs-comment">// [esp+18h] [ebp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int16 index_2; <span class="hljs-comment">// [esp+1Ch] [ebp-8h]</span><br>  <span class="hljs-type">unsigned</span> __int16 index_0; <span class="hljs-comment">// [esp+20h] [ebp-4h]</span><br><br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to D^3CTF~&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( code[<span class="hljs-number">0</span>] != <span class="hljs-number">0xFFFF</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( code[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span> )<br>    &#123;<br>      code[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%c&quot;</span>, code[<span class="hljs-number">3</span>]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( code[<span class="hljs-number">7</span>] == <span class="hljs-number">1</span> )<br>    &#123;<br>      code[<span class="hljs-number">7</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;input);<br>      len = v5++;<br>      <span class="hljs-keyword">if</span> ( len == <span class="hljs-number">36</span> &amp;&amp; code[<span class="hljs-number">8</span>] != <span class="hljs-number">126</span> )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( code[<span class="hljs-number">19</span>] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wrong!&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    index_0 = code[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">rc4_crypt</span>(sbox, &amp;code[code[<span class="hljs-number">0</span>]], <span class="hljs-number">3u</span>);<br>    index_1 = code[index_0];<br>    index_2 = word_22401A[index_0];<br>    index_3 = word_22401C[index_0];<br>    code[<span class="hljs-number">0</span>] = index_0 + <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">rc4_crypt</span>(sbox, &amp;code[index_0], <span class="hljs-number">3u</span>);<br>    code[index_3] = ~(code[index_1] &amp; code[index_2]);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Right! Your flag is antd3ctf&#123;your input&#125;&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 sbox 都是来自回调函数，我们先通过调试得到正确的key，然后得到加密后的数据 RC4 加密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// 初始化 S 和 T</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RC4_init</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* S, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> T[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>    &#123;<br>        <span class="hljs-comment">// 初始化 S</span><br>        *(S + i) = i;<br>        <span class="hljs-comment">// 密钥轮换</span><br>        *(T + i) = *(key + (i%len)) % <span class="hljs-number">256</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++)<br>    &#123;<br>        j = (j + *(S + i) + *(T + i)) % <span class="hljs-number">256</span>;<br>        <span class="hljs-comment">// 进行交换</span><br>        temp = *(S + i);<br>        *(S + i) = *(S + j);<br>        *(S + j) = temp;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 加密明文</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RC4_encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* S, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; len; k++)<br>    &#123;<br>        <span class="hljs-comment">// 固定方式生成</span><br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        j = (j + *(S + i)) % <span class="hljs-number">256</span>;<br>        <span class="hljs-comment">// 交换</span><br>        temp = *(S + i);<br>        *(S + i) = *(S + j);<br>        *(S + j) = temp;<br>        <span class="hljs-comment">// 固定方式生成的 t</span><br>        t = (*(S + i) + *(S + j)) % <span class="hljs-number">256</span>;<br>        <span class="hljs-comment">// 异或</span><br>        *(data + k) ^= *(S + t);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">numout</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* data, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%02X, &quot;</span>, *(data + i));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 初始化向量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> S[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-comment">// 密钥</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> key[<span class="hljs-number">256</span>] = <span class="hljs-string">&quot;YunZh1JunAlkaid&quot;</span>;<br>    <span class="hljs-comment">// 明文</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data_en[<span class="hljs-number">512</span>] = &#123; <span class="hljs-number">0x009E</span>, <span class="hljs-number">0x0028</span>, <span class="hljs-number">0x00F5</span>, <span class="hljs-number">0x0075</span>, <span class="hljs-number">0x0073</span>, <span class="hljs-number">0x0073</span>, <span class="hljs-number">0x0030</span>, <span class="hljs-number">0x007E</span>, <span class="hljs-number">0x0048</span>, <span class="hljs-number">0x0048</span>, <span class="hljs-number">0x00F2</span>, <span class="hljs-number">0x002F</span>, <span class="hljs-number">0x003D</span>, <span class="hljs-number">0x00EC</span>, <span class="hljs-number">0x0001</span>, <span class="hljs-number">0x0026</span>, <span class="hljs-number">0x003E</span>, <span class="hljs-number">0x00CD</span>, <span class="hljs-number">0x0082</span>, <span class="hljs-number">0x00AD</span>, <span class="hljs-number">0x00B1</span>, <span class="hljs-number">0x00D1</span>, <span class="hljs-number">0x0036</span>, <span class="hljs-number">0x00D2</span>, <span class="hljs-number">0x00B4</span>, <span class="hljs-number">0x00E5</span>, <span class="hljs-number">0x00E8</span>, <span class="hljs-number">0x004C</span>, <span class="hljs-number">0x003D</span>, <span class="hljs-number">0x000C</span>, <span class="hljs-number">0x0073</span>, <span class="hljs-number">0x00FD</span>, <span class="hljs-number">0x0059</span>, <span class="hljs-number">0x00A7</span>, <span class="hljs-number">0x0048</span>, <span class="hljs-number">0x0093</span>, <span class="hljs-number">0x00FD</span>, <span class="hljs-number">0x0006</span>, <span class="hljs-number">0x00E0</span>, <span class="hljs-number">0x0044</span>, <span class="hljs-number">0x0048</span>, <span class="hljs-number">0x0071</span>, <span class="hljs-number">0x0094</span>, <span class="hljs-number">0x004A</span>, <span class="hljs-number">0x008E</span>, <span class="hljs-number">0x00A4</span>, <span class="hljs-number">0x0036</span>, <span class="hljs-number">0x0091</span>, <span class="hljs-number">0x0023</span>, <span class="hljs-number">0x00EE</span>, <span class="hljs-number">0x0068</span>, <span class="hljs-number">0x00C1</span>, <span class="hljs-number">0x005D</span>, <span class="hljs-number">0x000B</span>, <span class="hljs-number">0x004D</span>, <span class="hljs-number">0x001A</span>, <span class="hljs-number">0x0074</span>, <span class="hljs-number">0x0083</span>, <span class="hljs-number">0x0051</span>, <span class="hljs-number">0x0052</span>, <span class="hljs-number">0x00EE</span>, <span class="hljs-number">0x00FE</span>, <span class="hljs-number">0x0011</span>, <span class="hljs-number">0x00A2</span>, <span class="hljs-number">0x00A1</span>, <span class="hljs-number">0x0064</span>, <span class="hljs-number">0x00BD</span>, <span class="hljs-number">0x0098</span>, <span class="hljs-number">0x004D</span>, <span class="hljs-number">0x00B9</span>, <span class="hljs-number">0x0097</span>, <span class="hljs-number">0x0045</span>, <span class="hljs-number">0x00E6</span>, <span class="hljs-number">0x00F7</span> &#125;;<br>    <span class="hljs-comment">// 明文长度</span><br>    <span class="hljs-comment">// unsigned int len_en = strlen(data_en);</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len_en = <span class="hljs-number">74</span>;<br>    <span class="hljs-comment">// 密钥长度</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len_k = <span class="hljs-number">15</span>;<br>    <span class="hljs-comment">// unsigned int len_k = strlen(key);</span><br>    <span class="hljs-comment">// 加密</span><br>    <span class="hljs-built_in">RC4_init</span>(S, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)key, len_k);<br>    <span class="hljs-built_in">RC4_encrypt</span>(S, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)data_en, len_en);<br>    <span class="hljs-built_in">numout</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)data_en, len_en);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs data">0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x0B, 0x6D, 0x0F, 0x03, 0x32, 0x42, 0x1D, 0x2B, 0x43, 0x78, 0x43, 0x73, 0x30, 0x2B, 0x4E, 0x63, 0x48, 0x77, 0x2E, 0x32, 0x39, 0x1A, 0x12, 0x71, 0x7A, 0x42, 0x17, 0x45, 0x72, 0x56, 0x0C, 0x5C, 0x4A, 0x62, 0x53, 0x33<br>length = <br></code></pre></td></tr></table></figure><p>尝试复现这个加密，发现有一些数据莫名其妙的不对，并且能够调试，于是尝试用idapython 来进行这个打桩log 的事</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> ida_dbg<br><span class="hljs-keyword">import</span> idaapi<br><span class="hljs-comment"># 断点</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bpt</span>(<span class="hljs-params">arr</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(arr)):<br>        idc.add_bpt(arr[i])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_var</span>(<span class="hljs-params">addr, reg</span>):<br>    <span class="hljs-comment"># 运行到 addr 处</span><br>    idc.run_to(addr)<br>    idc.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 得到 reg 的值</span><br>    <span class="hljs-keyword">return</span> idc.get_reg_value(reg) &amp; <span class="hljs-number">0xffff</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_var</span>(<span class="hljs-params">addr, reg</span>):<br>    idc.run_to(addr)<br>    idc.wait_for_next_event(ida_dbg.WFNE_SUSP, -<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> idc.get_reg_value(reg)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bin_log</span>(<span class="hljs-params">base_addr</span>):<br>    index_0 = read_var(base_addr + <span class="hljs-number">0x15A0</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br>    index_1 = read_var(base_addr + <span class="hljs-number">0x15CB</span>, <span class="hljs-string">&#x27;ecx&#x27;</span>)<br>    index_2 = read_var(base_addr + <span class="hljs-number">0x15DB</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br>    index_3 = read_var(base_addr + <span class="hljs-number">0x15EB</span>, <span class="hljs-string">&#x27;edx&#x27;</span>)<br>    var_0   = read_var(base_addr + <span class="hljs-number">0x1638</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br>    var_1 = idc.get_reg_value(<span class="hljs-string">&#x27;edx&#x27;</span>) &amp; <span class="hljs-number">0xffff</span><br>    var_2   = read_var(base_addr + <span class="hljs-number">0x163c</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(index_0) + <span class="hljs-string">&#x27;:   &#x27;</span> + <span class="hljs-string">&#x27;mem[&#x27;</span> + <span class="hljs-built_in">hex</span>(index_3) +<span class="hljs-string">&#x27;] = ~&#x27;</span> + <span class="hljs-string">&#x27; (mem[&#x27;</span> + <span class="hljs-built_in">hex</span>(index_1) + <span class="hljs-string">&#x27;] &amp; mem[&#x27;</span> + <span class="hljs-built_in">hex</span>(index_2) + <span class="hljs-string">&#x27;])&#x27;</span> )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t &#x27;</span> + <span class="hljs-built_in">hex</span>(var_2) + <span class="hljs-string">&#x27; = ~(&#x27;</span> + <span class="hljs-built_in">hex</span>(var_0) + <span class="hljs-string">&#x27; &amp; &#x27;</span> + <span class="hljs-built_in">hex</span>(var_1) + <span class="hljs-string">&#x27;)&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 获取基址</span><br>    base_addr = idaapi.get_imagebase()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;base_addr= &#x27;</span> + <span class="hljs-built_in">hex</span>(base_addr))<br>    <span class="hljs-comment"># 打上断点</span><br>    bpt_arr= [base_addr+<span class="hljs-number">0x1578</span>, base_addr + <span class="hljs-number">0x15A0</span>, base_addr + <span class="hljs-number">0x15CB</span>, base_addr + <span class="hljs-number">0x15DB</span>, base_addr + <span class="hljs-number">0x15EB</span>, base_addr + <span class="hljs-number">0x1638</span>, base_addr + <span class="hljs-number">0x163c</span>]<br>    bpt(bpt_arr)<br>    flag = get_var(base_addr + <span class="hljs-number">0x1578</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br>    <span class="hljs-keyword">while</span>(flag == <span class="hljs-number">0</span>):<br>        bin_log(base_addr)<br>        flag = get_var(base_addr + <span class="hljs-number">0x1578</span>, <span class="hljs-string">&#x27;eax&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs log">// 1<br>0x63:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x66:   mem[0xad4] = ~ mem[0x7] &amp; mem[0x7]<br>0x69:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x6c:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 2<br>0x6f:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x72:   mem[0xad5] = ~ mem[0x7] &amp; mem[0x7]<br>0x75:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x78:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 3<br>0x7b:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x7e:   mem[0xad6] = ~ mem[0x7] &amp; mem[0x7]<br>0x81:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x84:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 4<br>0x87:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x8a:   mem[0xad7] = ~ mem[0x7] &amp; mem[0x7]<br>0x8d:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x90:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 5<br>0x93:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x96:   mem[0xad8] = ~ mem[0x7] &amp; mem[0x7]<br>0x99:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x9c:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 6<br>0x9f:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xa2:   mem[0xad9] = ~ mem[0x7] &amp; mem[0x7]<br>0xa5:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xa8:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 7<br>0xab:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xae:   mem[0xada] = ~ mem[0x7] &amp; mem[0x7]<br>0xb1:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xb4:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 8<br>0xb7:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xba:   mem[0xadb] = ~ mem[0x7] &amp; mem[0x7]<br>0xbd:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xc0:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 9<br>0xc3:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xc6:   mem[0xadc] = ~ mem[0x7] &amp; mem[0x7]<br>0xc9:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xcc:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 9<br>0xcf:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xd2:   mem[0xadd] = ~ mem[0x7] &amp; mem[0x7]<br>0xd5:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xd8:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 10<br>0xdb:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xde:   mem[0xade] = ~ mem[0x7] &amp; mem[0x7]<br>0xe1:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xe4:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 11<br>0xe7:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xea:   mem[0xadf] = ~ mem[0x7] &amp; mem[0x7]<br>0xed:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xf0:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 12<br>0xf3:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0xf6:   mem[0xae0] = ~ mem[0x7] &amp; mem[0x7]<br>0xf9:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0xfc:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 13<br>0xff:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x102:   mem[0xae1] = ~ mem[0x7] &amp; mem[0x7]<br>0x105:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x108:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 14<br>0x10b:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x10e:   mem[0xae2] = ~ mem[0x7] &amp; mem[0x7]<br>0x111:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x114:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 15<br>0x117:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x11a:   mem[0xae3] = ~ mem[0x7] &amp; mem[0x7]<br>0x11d:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x120:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 16<br>0x123:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x126:   mem[0xae4] = ~ mem[0x7] &amp; mem[0x7]<br>0x129:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x12c:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 17<br>0x12f:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x132:   mem[0xae5] = ~ mem[0x7] &amp; mem[0x7]<br>0x135:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x138:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 18<br>0x13b:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x13e:   mem[0xae6] = ~ mem[0x7] &amp; mem[0x7]<br>0x141:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x144:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 19<br>0x147:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x14a:   mem[0xae7] = ~ mem[0x7] &amp; mem[0x7]<br>0x14d:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x150:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 20<br>0x153:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x156:   mem[0xae8] = ~ mem[0x7] &amp; mem[0x7]<br>0x159:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x15c:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 21<br>0x15f:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x162:   mem[0xae9] = ~ mem[0x7] &amp; mem[0x7]<br>0x165:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x168:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 22<br>0x16b:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x16e:   mem[0xaea] = ~ mem[0x7] &amp; mem[0x7]<br>0x171:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x174:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 23<br>0x177:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x17a:   mem[0xaeb] = ~ mem[0x7] &amp; mem[0x7]<br>0x17d:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x180:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 24<br>0x183:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x186:   mem[0xaec] = ~ mem[0x7] &amp; mem[0x7]<br>0x189:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x18c:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 25<br>0x18f:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x192:   mem[0xaed] = ~ mem[0x7] &amp; mem[0x7]<br>0x195:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x198:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 26<br>0x19b:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x19e:   mem[0xaee] = ~ mem[0x7] &amp; mem[0x7]<br>0x1a1:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1a4:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 27<br>0x1a7:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1aa:   mem[0xaef] = ~ mem[0x7] &amp; mem[0x7]<br>0x1ad:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1b0:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 28<br>0x1b3:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1b6:   mem[0xaf0] = ~ mem[0x7] &amp; mem[0x7]<br>0x1b9:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1bc:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 29<br>0x1bf:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1c2:   mem[0xaf1] = ~ mem[0x7] &amp; mem[0x7]<br>0x1c5:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1c8:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 30<br>0x1cb:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1ce:   mem[0xaf2] = ~ mem[0x7] &amp; mem[0x7]<br>0x1d1:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1d4:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 31<br>0x1d7:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1da:   mem[0xaf3] = ~ mem[0x7] &amp; mem[0x7]<br>0x1dd:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1e0:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 32<br>0x1e3:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1e6:   mem[0xaf4] = ~ mem[0x7] &amp; mem[0x7]<br>0x1e9:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1ec:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 33<br>0x1ef:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1f2:   mem[0xaf5] = ~ mem[0x7] &amp; mem[0x7]<br>0x1f5:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x1f8:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 34<br>0x1fb:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x1fe:   mem[0xaf6] = ~ mem[0x7] &amp; mem[0x7]<br>0x201:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x204:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 35<br>0x207:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x20a:   mem[0xaf7] = ~ mem[0x7] &amp; mem[0x7]<br>0x20d:   mem[0xb] = ~ mem[0x14] &amp; mem[0x14]<br>0x210:   mem[0x7] = ~ mem[0xb] &amp; mem[0xb]<br><br>// 36<br>0x213:   mem[0x7] = ~ mem[0x8] &amp; mem[0x8]<br>0x216:   mem[0xaf8] = ~ mem[0x7] &amp; mem[0x7]<br><br>// <br>0x219:   mem[0xb] = ~ mem[0xad4] &amp; mem[0xad4]<br>0x21c:   mem[0xb] = ~ mem[0xb] &amp; mem[0xad5]<br>0x21f:   mem[0xc] = ~ mem[0xad5] &amp; mem[0xad5]<br>0x222:   mem[0xc] = ~ mem[0xc] &amp; mem[0xad4]<br>0x225:   mem[0x11] = ~ mem[0xb] &amp; mem[0xc]<br><br>0x228:   mem[0xb] = ~ mem[0xad6] &amp; mem[0xad6]<br>0x22b:   mem[0xb] = ~ mem[0xb] &amp; mem[0xad7]<br>0x22e:   mem[0xc] = ~ mem[0xad7] &amp; mem[0xad7]<br>0x231:   mem[0xc] = ~ mem[0xc] &amp; mem[0xad6]<br>0x234:   mem[0x12] = ~ mem[0xb] &amp; mem[0xc]<br>0x237:   mem[0xb] = ~ mem[0x11] &amp; mem[0x11]<br>0x23a:   mem[0xb] = ~ mem[0xb] &amp; mem[0x12]<br>0x23d:   mem[0xc] = ~ mem[0x12] &amp; mem[0x12]<br>0x240:   mem[0xc] = ~ mem[0xc] &amp; mem[0x11]<br>0x243:   mem[0x12] = ~ mem[0xb] &amp; mem[0xc]<br>0x246:   mem[0xb] = ~ mem[0xaf9] &amp; mem[0xaf9]<br>0x249:   mem[0xb] = ~ mem[0xb] &amp; mem[0x12]<br>0x24c:   mem[0xc] = ~ mem[0x12] &amp; mem[0x12]<br>0x24f:   mem[0xc] = ~ mem[0xc] &amp; mem[0xaf9]<br>0x252:   mem[0x13] = ~ mem[0xb] &amp; mem[0xc]<br></code></pre></td></tr></table></figure><p>最后这段就是加密了，但是不完整，因为这里有一个验证，我们并没有通过验证。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0x219</span>:   mem[<span class="hljs-number">0xb</span>] = ~ mem[<span class="hljs-number">0xad4</span>] &amp; mem[<span class="hljs-number">0xad4</span>]<br><span class="hljs-number">0x21c</span>:   mem[<span class="hljs-number">0xb</span>] = ~ mem[<span class="hljs-number">0xb</span>] &amp; mem[<span class="hljs-number">0xad5</span>]<br><span class="hljs-number">0x21f</span>:   mem[<span class="hljs-number">0xc</span>] = ~ mem[<span class="hljs-number">0xad5</span>] &amp; mem[<span class="hljs-number">0xad5</span>]<br><span class="hljs-number">0x222</span>:   mem[<span class="hljs-number">0xc</span>] = ~ mem[<span class="hljs-number">0xc</span>] &amp; mem[<span class="hljs-number">0xad4</span>]<br><span class="hljs-number">0x225</span>:   mem[<span class="hljs-number">0x11</span>] = ~ mem[<span class="hljs-number">0xb</span>] &amp; mem[<span class="hljs-number">0xc</span>]<br></code></pre></td></tr></table></figure><p>加密基本上都是这样的形式，略加分析，这其实实现的就是一个异或操作，上述等价于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mem[<span class="hljs-number">0x11</span>] = mem[<span class="hljs-number">0xad4</span>] ^ mem[<span class="hljs-number">0xad5</span>]<br></code></pre></td></tr></table></figure><p>多试几次，就可以得到正向加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">delta = [<span class="hljs-number">0x24</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x33</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag)):<br>    m = flag[i % <span class="hljs-number">37</span>] ^ flag[(i+<span class="hljs-number">1</span>) % <span class="hljs-number">37</span>]<br>    n = flag[(i+<span class="hljs-number">2</span>) % <span class="hljs-number">37</span>] ^ flag[(i+<span class="hljs-number">3</span>) % <span class="hljs-number">37</span>]<br>    s.add((m ^ n) == delta[i])<br></code></pre></td></tr></table></figure><p>其中 delta 为 RC4 加密后的结果（除去所有0的结果） 其中 第37个字符确定为<code>~</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> ( len == <span class="hljs-number">36</span> &amp;&amp; code[<span class="hljs-number">8</span>] != <span class="hljs-number">126</span> )<br></code></pre></td></tr></table></figure><h2 id="求解-1"><a href="#求解-1" class="headerlink" title="求解"></a>求解</h2><p>正向基本明确了，现在就可以正向解密了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>flag = [BitVec(<span class="hljs-string">&#x27;flag%i&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37</span>)]<br>s = Solver()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    s.add(flag[i] &gt;= <span class="hljs-number">33</span>)<br>    s.add(flag[i] &lt;= <span class="hljs-number">126</span>)<br>s.add(flag[<span class="hljs-number">36</span>] == <span class="hljs-number">126</span>)<br>delta = [<span class="hljs-number">0x24</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x33</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag)):<br>    m = flag[i % <span class="hljs-number">37</span>] ^ flag[(i+<span class="hljs-number">1</span>) % <span class="hljs-number">37</span>]<br>    n = flag[(i+<span class="hljs-number">2</span>) % <span class="hljs-number">37</span>] ^ flag[(i+<span class="hljs-number">3</span>) % <span class="hljs-number">37</span>]<br>    s.add((m ^ n) == delta[i])<br><br><span class="hljs-keyword">if</span>(s.check() == sat):  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Solver!&quot;</span>)  <br>    result = s.model()  <br>    res = [<span class="hljs-built_in">chr</span>(result[flag[i]].as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37</span>)] <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(res))<br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No Solver!!&quot;</span>)  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
